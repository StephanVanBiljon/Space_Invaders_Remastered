
SpaceInvaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f00  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015e40  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aed8  0801aed8  0004aa78  2**0
                  CONTENTS
  4 .ARM          00000008  0801aed8  0801aed8  0002aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aee0  0801aee0  0004aa78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aee0  0801aee0  0002aee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aee4  0801aee4  0002aee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001aa78  20000000  0801aee8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  2001aa78  08035960  0004aa78  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b36c  08035960  0004b36c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004aa78  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c97f  00000000  00000000  0004aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e44  00000000  00000000  00057427  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  00059270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00059ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001666b  00000000  00000000  0005aa78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5a4  00000000  00000000  000710e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c098  00000000  00000000  0007b687  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010771f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003398  00000000  00000000  0010779c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2001aa78 	.word	0x2001aa78
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005080 	.word	0x08005080

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2001aa7c 	.word	0x2001aa7c
 80001d4:	08005080 	.word	0x08005080

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Sprite2Mem>:
1,
1,
1
};

uint8_t* Sprite2Mem(uint8_t *start, uint8_t *invader, uint8_t w, uint8_t h){
 80004d8:	b480      	push	{r7}
 80004da:	b08b      	sub	sp, #44	; 0x2c
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	4611      	mov	r1, r2
 80004e4:	461a      	mov	r2, r3
 80004e6:	460b      	mov	r3, r1
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	4613      	mov	r3, r2
 80004ec:	71bb      	strb	r3, [r7, #6]
	uint8_t *invptr1 = invader;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t *invptr2 = invader;
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	623b      	str	r3, [r7, #32]
	uint8_t *memloc = start;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	61fb      	str	r3, [r7, #28]

	//Invader1
	for(int r = 0; r < h; ++r){
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
 80004fe:	e048      	b.n	8000592 <Sprite2Mem+0xba>
		for(int c = 0; c < w; ++c){
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e01b      	b.n	800053e <Sprite2Mem+0x66>
			if(*invptr1 == 1){
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d107      	bne.n	800051e <Sprite2Mem+0x46>
				*memloc = 48;
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	2230      	movs	r2, #48	; 0x30
 8000512:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 48;
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	3301      	adds	r3, #1
 8000518:	2230      	movs	r2, #48	; 0x30
 800051a:	701a      	strb	r2, [r3, #0]
 800051c:	e006      	b.n	800052c <Sprite2Mem+0x54>
			}else{
				*memloc = 0;
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 0;
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	3301      	adds	r3, #1
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
			}
			memloc += 2;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3302      	adds	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
			invptr1++;
 8000532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
		for(int c = 0; c < w; ++c){
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	3301      	adds	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	429a      	cmp	r2, r3
 8000544:	dbdf      	blt.n	8000506 <Sprite2Mem+0x2e>
		}

		for(int c = 0; c < w; ++c){
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	e01b      	b.n	8000584 <Sprite2Mem+0xac>
			if(*invptr2 == 1){
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d107      	bne.n	8000564 <Sprite2Mem+0x8c>
				*memloc = 48;
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 48;
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	3301      	adds	r3, #1
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e006      	b.n	8000572 <Sprite2Mem+0x9a>
			}else{
				*memloc = 0;
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 0;
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
			}
			memloc += 2;
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3302      	adds	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
			invptr2++;
 8000578:	6a3b      	ldr	r3, [r7, #32]
 800057a:	3301      	adds	r3, #1
 800057c:	623b      	str	r3, [r7, #32]
		for(int c = 0; c < w; ++c){
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	3301      	adds	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbdf      	blt.n	800054c <Sprite2Mem+0x74>
	for(int r = 0; r < h; ++r){
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	3301      	adds	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	69ba      	ldr	r2, [r7, #24]
 8000596:	429a      	cmp	r2, r3
 8000598:	dbb2      	blt.n	8000500 <Sprite2Mem+0x28>
		}
	}

	return memloc;
 800059a:	69fb      	ldr	r3, [r7, #28]
}
 800059c:	4618      	mov	r0, r3
 800059e:	372c      	adds	r7, #44	; 0x2c
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LDRSprites>:

void LDRSprites(uint8_t *start){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint8_t *memloc;
	memloc = Sprite2Mem(start, Invader1, 11, 8);
 80005b0:	2308      	movs	r3, #8
 80005b2:	220b      	movs	r2, #11
 80005b4:	4912      	ldr	r1, [pc, #72]	; (8000600 <LDRSprites+0x58>)
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff ff8e 	bl	80004d8 <Sprite2Mem>
 80005bc:	60f8      	str	r0, [r7, #12]
	memloc = Sprite2Mem(memloc, Invader2, 8, 8);
 80005be:	2308      	movs	r3, #8
 80005c0:	2208      	movs	r2, #8
 80005c2:	4910      	ldr	r1, [pc, #64]	; (8000604 <LDRSprites+0x5c>)
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ff87 	bl	80004d8 <Sprite2Mem>
 80005ca:	60f8      	str	r0, [r7, #12]
	memloc = Sprite2Mem(memloc, Invader3, 8, 8);
 80005cc:	2308      	movs	r3, #8
 80005ce:	2208      	movs	r2, #8
 80005d0:	490d      	ldr	r1, [pc, #52]	; (8000608 <LDRSprites+0x60>)
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f7ff ff80 	bl	80004d8 <Sprite2Mem>
 80005d8:	60f8      	str	r0, [r7, #12]
	memloc = Sprite2Mem(memloc, Ship, 11, 8);
 80005da:	2308      	movs	r3, #8
 80005dc:	220b      	movs	r2, #11
 80005de:	490b      	ldr	r1, [pc, #44]	; (800060c <LDRSprites+0x64>)
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f7ff ff79 	bl	80004d8 <Sprite2Mem>
 80005e6:	60f8      	str	r0, [r7, #12]
	memloc = Sprite2Mem(memloc, Missile, 1, 4);
 80005e8:	2304      	movs	r3, #4
 80005ea:	2201      	movs	r2, #1
 80005ec:	4908      	ldr	r1, [pc, #32]	; (8000610 <LDRSprites+0x68>)
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f7ff ff72 	bl	80004d8 <Sprite2Mem>
 80005f4:	60f8      	str	r0, [r7, #12]
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	20000058 	.word	0x20000058
 8000608:	20000098 	.word	0x20000098
 800060c:	200000d8 	.word	0x200000d8
 8000610:	20000130 	.word	0x20000130

08000614 <FindSprite>:

uint8_t* FindSprite(uint8_t *start, uint8_t sprite){
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	uint8_t *temp = start;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60fb      	str	r3, [r7, #12]

	switch(sprite){
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d826      	bhi.n	8000678 <FindSprite+0x64>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <FindSprite+0x1c>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000645 	.word	0x08000645
 8000634:	08000649 	.word	0x08000649
 8000638:	08000655 	.word	0x08000655
 800063c:	08000661 	.word	0x08000661
 8000640:	0800066d 	.word	0x0800066d
	case 0:
		return temp;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	e018      	b.n	800067a <FindSprite+0x66>
	case 1:
		temp = temp + (INV1_W * INV1_H);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800064e:	60fb      	str	r3, [r7, #12]
		return temp;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	e012      	b.n	800067a <FindSprite+0x66>
	case 2:
		temp = temp + (INV1_W * INV1_H) + (INV2_W * INV2_H);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800065a:	60fb      	str	r3, [r7, #12]
		return temp;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	e00c      	b.n	800067a <FindSprite+0x66>
	case 3:
		temp = temp + (INV1_W * INV1_H) + (INV2_W * INV2_H) + (INV3_W * INV3_H);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8000666:	60fb      	str	r3, [r7, #12]
		return temp;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	e006      	b.n	800067a <FindSprite+0x66>
	case 4:
		temp = temp + (INV1_W * INV1_H) + (INV2_W * INV2_H) + (INV3_W * INV3_H) + (SHP_W * SHP_H);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8000672:	60fb      	str	r3, [r7, #12]
		return temp;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	e000      	b.n	800067a <FindSprite+0x66>
	}
	return temp;
 8000678:	68fb      	ldr	r3, [r7, #12]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <updateScreen>:
} row;

row Row[4];

void updateScreen()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af02      	add	r7, sp, #8
	screenClear();
 800068e:	f001 f943 	bl	8001918 <screenClear>

	drawInvaders();
 8000692:	f000 ff91 	bl	80015b8 <drawInvaders>

	shootMissileINV();
 8000696:	f000 fa7d 	bl	8000b94 <shootMissileINV>

			  if(buttonA_pressed && (xPos > 0) && ((yPosMINV < yPos) || ((xPosMINV <= xPos) || (xPosMINV >= (xPos+SHP_W)))))
 800069a:	4b5e      	ldr	r3, [pc, #376]	; (8000814 <updateScreen+0x18c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d02c      	beq.n	80006fc <updateScreen+0x74>
 80006a2:	4b5d      	ldr	r3, [pc, #372]	; (8000818 <updateScreen+0x190>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d028      	beq.n	80006fc <updateScreen+0x74>
 80006aa:	4b5c      	ldr	r3, [pc, #368]	; (800081c <updateScreen+0x194>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b5c      	ldr	r3, [pc, #368]	; (8000820 <updateScreen+0x198>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d30d      	bcc.n	80006d2 <updateScreen+0x4a>
 80006b6:	4b5b      	ldr	r3, [pc, #364]	; (8000824 <updateScreen+0x19c>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b57      	ldr	r3, [pc, #348]	; (8000818 <updateScreen+0x190>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d907      	bls.n	80006d2 <updateScreen+0x4a>
 80006c2:	4b55      	ldr	r3, [pc, #340]	; (8000818 <updateScreen+0x190>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f103 0216 	add.w	r2, r3, #22
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <updateScreen+0x19c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d814      	bhi.n	80006fc <updateScreen+0x74>
			  {
				xPos = xPos-10;
 80006d2:	4b51      	ldr	r3, [pc, #324]	; (8000818 <updateScreen+0x190>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b0a      	subs	r3, #10
 80006d8:	4a4f      	ldr	r2, [pc, #316]	; (8000818 <updateScreen+0x190>)
 80006da:	6013      	str	r3, [r2, #0]

				BitBlitNew(FindSprite(Sprites_Data, SHP), xPos, yPos, SHP_W, SHP_H);
 80006dc:	2103      	movs	r1, #3
 80006de:	4852      	ldr	r0, [pc, #328]	; (8000828 <updateScreen+0x1a0>)
 80006e0:	f7ff ff98 	bl	8000614 <FindSprite>
 80006e4:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <updateScreen+0x190>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <updateScreen+0x198>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	2310      	movs	r3, #16
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2316      	movs	r3, #22
 80006f6:	f001 fca1 	bl	800203c <BitBlitNew>
 80006fa:	e066      	b.n	80007ca <updateScreen+0x142>
			  }
			  else if(buttonD_pressed && (xPos < 320-SHP_W) && ((yPosMINV < yPos) || ((xPosMINV <= xPos) || (xPosMINV >= (xPos+SHP_W)))))
 80006fc:	4b4b      	ldr	r3, [pc, #300]	; (800082c <updateScreen+0x1a4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d02d      	beq.n	8000760 <updateScreen+0xd8>
 8000704:	4b44      	ldr	r3, [pc, #272]	; (8000818 <updateScreen+0x190>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800070c:	d228      	bcs.n	8000760 <updateScreen+0xd8>
 800070e:	4b43      	ldr	r3, [pc, #268]	; (800081c <updateScreen+0x194>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <updateScreen+0x198>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d30d      	bcc.n	8000736 <updateScreen+0xae>
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <updateScreen+0x19c>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <updateScreen+0x190>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	429a      	cmp	r2, r3
 8000724:	d907      	bls.n	8000736 <updateScreen+0xae>
 8000726:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <updateScreen+0x190>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f103 0216 	add.w	r2, r3, #22
 800072e:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <updateScreen+0x19c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d814      	bhi.n	8000760 <updateScreen+0xd8>
			  {
				xPos = xPos+10;
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <updateScreen+0x190>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	330a      	adds	r3, #10
 800073c:	4a36      	ldr	r2, [pc, #216]	; (8000818 <updateScreen+0x190>)
 800073e:	6013      	str	r3, [r2, #0]

				BitBlitNew(FindSprite(Sprites_Data, SHP), xPos, yPos, SHP_W, SHP_H);
 8000740:	2103      	movs	r1, #3
 8000742:	4839      	ldr	r0, [pc, #228]	; (8000828 <updateScreen+0x1a0>)
 8000744:	f7ff ff66 	bl	8000614 <FindSprite>
 8000748:	4b33      	ldr	r3, [pc, #204]	; (8000818 <updateScreen+0x190>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <updateScreen+0x198>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	2310      	movs	r3, #16
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2316      	movs	r3, #22
 800075a:	f001 fc6f 	bl	800203c <BitBlitNew>
 800075e:	e034      	b.n	80007ca <updateScreen+0x142>
			  }
			  else if(!((yPosMINV >= yPos) && ((xPosMINV > xPos) && (xPosMINV < (xPos+SHP_W)))))
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <updateScreen+0x194>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <updateScreen+0x198>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d30d      	bcc.n	8000788 <updateScreen+0x100>
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <updateScreen+0x19c>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <updateScreen+0x190>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d907      	bls.n	8000788 <updateScreen+0x100>
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <updateScreen+0x190>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f103 0216 	add.w	r2, r3, #22
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <updateScreen+0x19c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d80f      	bhi.n	80007a8 <updateScreen+0x120>
			  {
				  BitBlitNew(FindSprite(Sprites_Data, SHP), xPos, yPos, SHP_W, SHP_H);
 8000788:	2103      	movs	r1, #3
 800078a:	4827      	ldr	r0, [pc, #156]	; (8000828 <updateScreen+0x1a0>)
 800078c:	f7ff ff42 	bl	8000614 <FindSprite>
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <updateScreen+0x190>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <updateScreen+0x198>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	2310      	movs	r3, #16
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2316      	movs	r3, #22
 80007a2:	f001 fc4b 	bl	800203c <BitBlitNew>
 80007a6:	e010      	b.n	80007ca <updateScreen+0x142>
			  }
			  else
			  {
				  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) audio2, AUDIOLEN2);
 80007a8:	f245 125c 	movw	r2, #20828	; 0x515c
 80007ac:	4920      	ldr	r1, [pc, #128]	; (8000830 <updateScreen+0x1a8>)
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <updateScreen+0x1ac>)
 80007b0:	f002 fea2 	bl	80034f8 <HAL_I2S_Transmit_DMA>
				  lives--;
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <updateScreen+0x1b0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <updateScreen+0x1b0>)
 80007bc:	6013      	str	r3, [r2, #0]
				  if(lives > 0)
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <updateScreen+0x1b0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	dd23      	ble.n	800080e <updateScreen+0x186>
					  resetGame();
 80007c6:	f000 f843 	bl	8000850 <resetGame>
				  else
					  return;
			  }

			  if(buttonO_pressed)
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <updateScreen+0x1b4>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d010      	beq.n	80007f4 <updateScreen+0x16c>
			  {
				  if(yPosM >= MSL_H) // change to (or alien is dead)
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <updateScreen+0x1b8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	d902      	bls.n	80007e0 <updateScreen+0x158>
				  {
					  shootMissile();
 80007da:	f000 fa97 	bl	8000d0c <shootMissile>
 80007de:	e00f      	b.n	8000800 <updateScreen+0x178>
				  }
				  else
				  {
					  buttonO_pressed = 0;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <updateScreen+0x1b4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
					  count3 = 0;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <updateScreen+0x1bc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
					  yPosM = 200-SHP_H;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <updateScreen+0x1b8>)
 80007ee:	22b8      	movs	r2, #184	; 0xb8
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	e005      	b.n	8000800 <updateScreen+0x178>
				  }
			  }
			  else
			  {
				  yPosM = 200-SHP_H; // stops the missile coords from staying on a specific yposm and killing more invaders
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <updateScreen+0x1b8>)
 80007f6:	22b8      	movs	r2, #184	; 0xb8
 80007f8:	601a      	str	r2, [r3, #0]
				  count3 = 0;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <updateScreen+0x1bc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
			  }

	displayint(score, (uint32_t*)(0x20020418));
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <updateScreen+0x1c0>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	4911      	ldr	r1, [pc, #68]	; (800084c <updateScreen+0x1c4>)
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f96a 	bl	8000ae0 <displayint>
 800080c:	e000      	b.n	8000810 <updateScreen+0x188>
					  return;
 800080e:	bf00      	nop
}
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2001b311 	.word	0x2001b311
 8000818:	2001aa34 	.word	0x2001aa34
 800081c:	2001b318 	.word	0x2001b318
 8000820:	2001aa38 	.word	0x2001aa38
 8000824:	2001b31c 	.word	0x2001b31c
 8000828:	2001aad0 	.word	0x2001aad0
 800082c:	2001b1e0 	.word	0x2001b1e0
 8000830:	0800a908 	.word	0x0800a908
 8000834:	2001b320 	.word	0x2001b320
 8000838:	2001aa60 	.word	0x2001aa60
 800083c:	2001b310 	.word	0x2001b310
 8000840:	2001aa3c 	.word	0x2001aa3c
 8000844:	2001aaa0 	.word	0x2001aaa0
 8000848:	2001aaae 	.word	0x2001aaae
 800084c:	20020418 	.word	0x20020418

08000850 <resetGame>:

void  resetGame() // reset all variables and things before the while loop in the main function
{
 8000850:	b490      	push	{r4, r7}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
	xPos = 100;
 8000856:	4b7e      	ldr	r3, [pc, #504]	; (8000a50 <resetGame+0x200>)
 8000858:	2264      	movs	r2, #100	; 0x64
 800085a:	601a      	str	r2, [r3, #0]
	yPos = 200-SHP_H;
 800085c:	4b7d      	ldr	r3, [pc, #500]	; (8000a54 <resetGame+0x204>)
 800085e:	22b8      	movs	r2, #184	; 0xb8
 8000860:	601a      	str	r2, [r3, #0]

	count1 = 0;
 8000862:	4b7d      	ldr	r3, [pc, #500]	; (8000a58 <resetGame+0x208>)
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
	count2 = 0;
 8000868:	4b7c      	ldr	r3, [pc, #496]	; (8000a5c <resetGame+0x20c>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]

	yPosM = 200-SHP_H;
 800086e:	4b7c      	ldr	r3, [pc, #496]	; (8000a60 <resetGame+0x210>)
 8000870:	22b8      	movs	r2, #184	; 0xb8
 8000872:	601a      	str	r2, [r3, #0]
	count3 = 0;
 8000874:	4b7b      	ldr	r3, [pc, #492]	; (8000a64 <resetGame+0x214>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]

	invShoot = 0;
 800087a:	4b7b      	ldr	r3, [pc, #492]	; (8000a68 <resetGame+0x218>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
	count4 = 0;
 8000880:	4b7a      	ldr	r3, [pc, #488]	; (8000a6c <resetGame+0x21c>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
	countRand = 4;
 8000886:	4b7a      	ldr	r3, [pc, #488]	; (8000a70 <resetGame+0x220>)
 8000888:	2204      	movs	r2, #4
 800088a:	601a      	str	r2, [r3, #0]

	playSound1 = 0;
 800088c:	4b79      	ldr	r3, [pc, #484]	; (8000a74 <resetGame+0x224>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]

	score = 0;
 8000892:	4b79      	ldr	r3, [pc, #484]	; (8000a78 <resetGame+0x228>)
 8000894:	2200      	movs	r2, #0
 8000896:	801a      	strh	r2, [r3, #0]

	rowToMove = 3; // moves bottom row first
 8000898:	4b78      	ldr	r3, [pc, #480]	; (8000a7c <resetGame+0x22c>)
 800089a:	2203      	movs	r2, #3
 800089c:	601a      	str	r2, [r3, #0]
	xPosAdd = 6;
 800089e:	4b78      	ldr	r3, [pc, #480]	; (8000a80 <resetGame+0x230>)
 80008a0:	2206      	movs	r2, #6
 80008a2:	601a      	str	r2, [r3, #0]
	yPosAdd = 20;
 80008a4:	4b77      	ldr	r3, [pc, #476]	; (8000a84 <resetGame+0x234>)
 80008a6:	2214      	movs	r2, #20
 80008a8:	601a      	str	r2, [r3, #0]
	offset = 136; // the initial width of the grid
 80008aa:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <resetGame+0x238>)
 80008ac:	2288      	movs	r2, #136	; 0x88
 80008ae:	601a      	str	r2, [r3, #0]
	isEmptyCol[0] = 0;
 80008b0:	4b76      	ldr	r3, [pc, #472]	; (8000a8c <resetGame+0x23c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	isEmptyCol[1] = 0;
 80008b6:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <resetGame+0x23c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	705a      	strb	r2, [r3, #1]
	isEmptyCol[2] = 0;
 80008bc:	4b73      	ldr	r3, [pc, #460]	; (8000a8c <resetGame+0x23c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	709a      	strb	r2, [r3, #2]
	isEmptyCol[3] = 0;
 80008c2:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <resetGame+0x23c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	70da      	strb	r2, [r3, #3]
	isEmptyCol[4] = 0;
 80008c8:	4b70      	ldr	r3, [pc, #448]	; (8000a8c <resetGame+0x23c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	711a      	strb	r2, [r3, #4]
	isEmptyCol[5] = 0;
 80008ce:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <resetGame+0x23c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	715a      	strb	r2, [r3, #5]

	latch54321 = 1; // these latches make sure that offset isn't continuously minused when a column is empty
 80008d4:	4b6e      	ldr	r3, [pc, #440]	; (8000a90 <resetGame+0x240>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
	latch5432 = 1;
 80008da:	4b6e      	ldr	r3, [pc, #440]	; (8000a94 <resetGame+0x244>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
	latch543 = 1;
 80008e0:	4b6d      	ldr	r3, [pc, #436]	; (8000a98 <resetGame+0x248>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
	latch54 = 1;
 80008e6:	4b6d      	ldr	r3, [pc, #436]	; (8000a9c <resetGame+0x24c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
	latch5 = 1;
 80008ec:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <resetGame+0x250>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]

	latch01234 = 1;
 80008f2:	4b6c      	ldr	r3, [pc, #432]	; (8000aa4 <resetGame+0x254>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
	latch0123 = 1;
 80008f8:	4b6b      	ldr	r3, [pc, #428]	; (8000aa8 <resetGame+0x258>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
	latch012 = 1;
 80008fe:	4b6b      	ldr	r3, [pc, #428]	; (8000aac <resetGame+0x25c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
	latch01 = 1;
 8000904:	4b6a      	ldr	r3, [pc, #424]	; (8000ab0 <resetGame+0x260>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
	latch0 = 1;
 800090a:	4b6a      	ldr	r3, [pc, #424]	; (8000ab4 <resetGame+0x264>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]

	alternate = 0;
 8000910:	4b69      	ldr	r3, [pc, #420]	; (8000ab8 <resetGame+0x268>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]

	yOffset = 88;
 8000916:	4b69      	ldr	r3, [pc, #420]	; (8000abc <resetGame+0x26c>)
 8000918:	2258      	movs	r2, #88	; 0x58
 800091a:	601a      	str	r2, [r3, #0]
	isEmptyRow[0] = 0;
 800091c:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <resetGame+0x270>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
	isEmptyRow[1] = 0;
 8000922:	4b67      	ldr	r3, [pc, #412]	; (8000ac0 <resetGame+0x270>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
	isEmptyRow[2] = 0;
 8000928:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <resetGame+0x270>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	isEmptyRow[3] = 0;
 800092e:	4b64      	ldr	r3, [pc, #400]	; (8000ac0 <resetGame+0x270>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
	latchabc = 1;
 8000934:	4b63      	ldr	r3, [pc, #396]	; (8000ac4 <resetGame+0x274>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
	latchab = 1;
 800093a:	4b63      	ldr	r3, [pc, #396]	; (8000ac8 <resetGame+0x278>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
	latcha = 1;
 8000940:	4b62      	ldr	r3, [pc, #392]	; (8000acc <resetGame+0x27c>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]

	yPosloop = 20; // start of the invader grid
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <resetGame+0x280>)
 8000948:	2214      	movs	r2, #20
 800094a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 4; i++) // initialising the grid of invaders
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e04e      	b.n	80009f0 <resetGame+0x1a0>
	{
		 xPosloop = 0; // start of invader grid
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <resetGame+0x284>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 6; j++)
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	e03d      	b.n	80009da <resetGame+0x18a>
		{
			invGrid[i][j].xCoord = xPosloop;
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <resetGame+0x284>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	461c      	mov	r4, r3
 8000964:	485c      	ldr	r0, [pc, #368]	; (8000ad8 <resetGame+0x288>)
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	68f9      	ldr	r1, [r7, #12]
 800096a:	461a      	mov	r2, r3
 800096c:	0052      	lsls	r2, r2, #1
 800096e:	441a      	add	r2, r3
 8000970:	0093      	lsls	r3, r2, #2
 8000972:	461a      	mov	r2, r3
 8000974:	460b      	mov	r3, r1
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	4413      	add	r3, r2
 800097e:	4403      	add	r3, r0
 8000980:	601c      	str	r4, [r3, #0]
			invGrid[i][j].yCoord = yPosloop;
 8000982:	4b53      	ldr	r3, [pc, #332]	; (8000ad0 <resetGame+0x280>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	461c      	mov	r4, r3
 8000988:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <resetGame+0x288>)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	68f9      	ldr	r1, [r7, #12]
 800098e:	461a      	mov	r2, r3
 8000990:	0052      	lsls	r2, r2, #1
 8000992:	441a      	add	r2, r3
 8000994:	0093      	lsls	r3, r2, #2
 8000996:	461a      	mov	r2, r3
 8000998:	460b      	mov	r3, r1
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	440b      	add	r3, r1
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4413      	add	r3, r2
 80009a2:	4403      	add	r3, r0
 80009a4:	3304      	adds	r3, #4
 80009a6:	601c      	str	r4, [r3, #0]
			invGrid[i][j].gameState = 1;
 80009a8:	484b      	ldr	r0, [pc, #300]	; (8000ad8 <resetGame+0x288>)
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	68f9      	ldr	r1, [r7, #12]
 80009ae:	461a      	mov	r2, r3
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	441a      	add	r2, r3
 80009b4:	0093      	lsls	r3, r2, #2
 80009b6:	461a      	mov	r2, r3
 80009b8:	460b      	mov	r3, r1
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	440b      	add	r3, r1
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	4413      	add	r3, r2
 80009c2:	4403      	add	r3, r0
 80009c4:	3308      	adds	r3, #8
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]

			xPosloop += (INV2_W+8); // wont let me do INV2_W*1.5 for some reason, same for INV2_H
 80009ca:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <resetGame+0x284>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3318      	adds	r3, #24
 80009d0:	4a40      	ldr	r2, [pc, #256]	; (8000ad4 <resetGame+0x284>)
 80009d2:	6013      	str	r3, [r2, #0]
		for(int j = 0; j < 6; j++)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b05      	cmp	r3, #5
 80009de:	ddbe      	ble.n	800095e <resetGame+0x10e>
		}

		yPosloop += (INV2_H+8);
 80009e0:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <resetGame+0x280>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3318      	adds	r3, #24
 80009e6:	4a3a      	ldr	r2, [pc, #232]	; (8000ad0 <resetGame+0x280>)
 80009e8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4; i++) // initialising the grid of invaders
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	ddad      	ble.n	8000952 <resetGame+0x102>
	}

	for(int i = 0; i < 4; i++) // initially setting up the row array
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e020      	b.n	8000a3e <resetGame+0x1ee>
	{
		Row[i].xCoord = invGrid[0][0].xCoord;
 80009fc:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <resetGame+0x288>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4936      	ldr	r1, [pc, #216]	; (8000adc <resetGame+0x28c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	440b      	add	r3, r1
 8000a08:	601a      	str	r2, [r3, #0]
		Row[i].xCoord2 = invGrid[0][5].xCoord;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <resetGame+0x288>)
 8000a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a0e:	4933      	ldr	r1, [pc, #204]	; (8000adc <resetGame+0x28c>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	440b      	add	r3, r1
 8000a16:	3304      	adds	r3, #4
 8000a18:	601a      	str	r2, [r3, #0]
		Row[i].vel = 1; // positive velocity
 8000a1a:	4a30      	ldr	r2, [pc, #192]	; (8000adc <resetGame+0x28c>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	4413      	add	r3, r2
 8000a22:	330c      	adds	r3, #12
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
		Row[i].yCoord = invGrid[0][0].yCoord;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <resetGame+0x288>)
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	492b      	ldr	r1, [pc, #172]	; (8000adc <resetGame+0x28c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	440b      	add	r3, r1
 8000a34:	3308      	adds	r3, #8
 8000a36:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) // initially setting up the row array
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	dddb      	ble.n	80009fc <resetGame+0x1ac>
	}
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc90      	pop	{r4, r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2001aa34 	.word	0x2001aa34
 8000a54:	2001aa38 	.word	0x2001aa38
 8000a58:	2001aa98 	.word	0x2001aa98
 8000a5c:	2001aa9c 	.word	0x2001aa9c
 8000a60:	2001aa3c 	.word	0x2001aa3c
 8000a64:	2001aaa0 	.word	0x2001aaa0
 8000a68:	2001aaa4 	.word	0x2001aaa4
 8000a6c:	2001aaa8 	.word	0x2001aaa8
 8000a70:	2001aa40 	.word	0x2001aa40
 8000a74:	2001aaac 	.word	0x2001aaac
 8000a78:	2001aaae 	.word	0x2001aaae
 8000a7c:	2001aa44 	.word	0x2001aa44
 8000a80:	2001aa48 	.word	0x2001aa48
 8000a84:	2001aa4c 	.word	0x2001aa4c
 8000a88:	2001aa50 	.word	0x2001aa50
 8000a8c:	2001aab4 	.word	0x2001aab4
 8000a90:	2001aa54 	.word	0x2001aa54
 8000a94:	2001aa55 	.word	0x2001aa55
 8000a98:	2001aa56 	.word	0x2001aa56
 8000a9c:	2001aa57 	.word	0x2001aa57
 8000aa0:	2001aa58 	.word	0x2001aa58
 8000aa4:	2001aa59 	.word	0x2001aa59
 8000aa8:	2001aa5a 	.word	0x2001aa5a
 8000aac:	2001aa5b 	.word	0x2001aa5b
 8000ab0:	2001aa5c 	.word	0x2001aa5c
 8000ab4:	2001aa5d 	.word	0x2001aa5d
 8000ab8:	2001aabc 	.word	0x2001aabc
 8000abc:	2001aa64 	.word	0x2001aa64
 8000ac0:	2001aac0 	.word	0x2001aac0
 8000ac4:	2001aa68 	.word	0x2001aa68
 8000ac8:	2001aa69 	.word	0x2001aa69
 8000acc:	2001aa6a 	.word	0x2001aa6a
 8000ad0:	2001b314 	.word	0x2001b314
 8000ad4:	2001b30c 	.word	0x2001b30c
 8000ad8:	2001b1e4 	.word	0x2001b1e4
 8000adc:	2001b098 	.word	0x2001b098

08000ae0 <displayint>:

void displayint(uint16_t val, uint32_t* screenptr)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	72fb      	strb	r3, [r7, #11]
	uint32_t* digitptr;
	uint32_t* scrcopyptr;

	for (int i = 0; i < 5; i++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e040      	b.n	8000b78 <displayint+0x98>
	{
		digit = val % 10;
 8000af6:	88fa      	ldrh	r2, [r7, #6]
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <displayint+0xac>)
 8000afa:	fba3 1302 	umull	r1, r3, r3, r2
 8000afe:	08d9      	lsrs	r1, r3, #3
 8000b00:	460b      	mov	r3, r1
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	72fb      	strb	r3, [r7, #11]
		val /= 10;
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <displayint+0xac>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	80fb      	strh	r3, [r7, #6]

		scrcopyptr = screenptr;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	61bb      	str	r3, [r7, #24]
		digitptr = (uint32_t*)(digits + (digit << 3));
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <displayint+0xb0>)
 8000b26:	4413      	add	r3, r2
 8000b28:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 9; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	e01a      	b.n	8000b66 <displayint+0x86>
		{
			for (int j = 0; j < 2; j++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e00a      	b.n	8000b4c <displayint+0x6c>
			{
				*scrcopyptr++ = *digitptr++;
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	1d13      	adds	r3, r2, #4
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	1d19      	adds	r1, r3, #4
 8000b40:	61b9      	str	r1, [r7, #24]
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 2; j++)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	ddf1      	ble.n	8000b36 <displayint+0x56>
			}
			digitptr += 18;
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3348      	adds	r3, #72	; 0x48
 8000b56:	61fb      	str	r3, [r7, #28]
			scrcopyptr += 78;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000b5e:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 9; i++)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	3301      	adds	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	dde1      	ble.n	8000b30 <displayint+0x50>

		}
		screenptr -= 2;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3b08      	subs	r3, #8
 8000b70:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 5; i++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	ddbb      	ble.n	8000af6 <displayint+0x16>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	cccccccd 	.word	0xcccccccd
 8000b90:	08005098 	.word	0x08005098

08000b94 <shootMissileINV>:

void shootMissileINV()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af02      	add	r7, sp, #8
	if((count4 == 0) && (invShoot == 1)) // which invader will shoot? row order: 415302
 8000b9a:	4b55      	ldr	r3, [pc, #340]	; (8000cf0 <shootMissileINV+0x15c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d176      	bne.n	8000c90 <shootMissileINV+0xfc>
 8000ba2:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <shootMissileINV+0x160>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d171      	bne.n	8000c90 <shootMissileINV+0xfc>
		 {

			 for(int i = 3; i >= 0; i--)
 8000bac:	2303      	movs	r3, #3
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	e03c      	b.n	8000c2c <shootMissileINV+0x98>
			 	{
				 	if(invGrid[i][countRand].gameState != 0)
 8000bb2:	4b51      	ldr	r3, [pc, #324]	; (8000cf8 <shootMissileINV+0x164>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4851      	ldr	r0, [pc, #324]	; (8000cfc <shootMissileINV+0x168>)
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	0052      	lsls	r2, r2, #1
 8000bbe:	441a      	add	r2, r3
 8000bc0:	0093      	lsls	r3, r2, #2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	440b      	add	r3, r1
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	4403      	add	r3, r0
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d026      	beq.n	8000c26 <shootMissileINV+0x92>
				 	{
				 		xPosMINV = invGrid[i][countRand].xCoord + (INV2_W/2); // set the xy coords equal to the bottom most invader
 8000bd8:	4b47      	ldr	r3, [pc, #284]	; (8000cf8 <shootMissileINV+0x164>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4847      	ldr	r0, [pc, #284]	; (8000cfc <shootMissileINV+0x168>)
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	461a      	mov	r2, r3
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	441a      	add	r2, r3
 8000be6:	0093      	lsls	r3, r2, #2
 8000be8:	461a      	mov	r2, r3
 8000bea:	460b      	mov	r3, r1
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4403      	add	r3, r0
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	4a41      	ldr	r2, [pc, #260]	; (8000d00 <shootMissileINV+0x16c>)
 8000bfc:	6013      	str	r3, [r2, #0]
				 		yPosMINV = invGrid[i][countRand].yCoord;
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <shootMissileINV+0x164>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	483e      	ldr	r0, [pc, #248]	; (8000cfc <shootMissileINV+0x168>)
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	461a      	mov	r2, r3
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	441a      	add	r2, r3
 8000c0c:	0093      	lsls	r3, r2, #2
 8000c0e:	461a      	mov	r2, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	4403      	add	r3, r0
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a38      	ldr	r2, [pc, #224]	; (8000d04 <shootMissileINV+0x170>)
 8000c22:	6013      	str	r3, [r2, #0]
				 		break;
 8000c24:	e005      	b.n	8000c32 <shootMissileINV+0x9e>
			 for(int i = 3; i >= 0; i--)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dabf      	bge.n	8000bb2 <shootMissileINV+0x1e>
				 	}
			 	}

			 switch(countRand)
 8000c32:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <shootMissileINV+0x164>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d825      	bhi.n	8000c86 <shootMissileINV+0xf2>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <shootMissileINV+0xac>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000c59 	.word	0x08000c59
 8000c44:	08000c61 	.word	0x08000c61
 8000c48:	08000c69 	.word	0x08000c69
 8000c4c:	08000c71 	.word	0x08000c71
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	08000c81 	.word	0x08000c81
			 {
			 case 0:
				 countRand = 2;
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <shootMissileINV+0x164>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	601a      	str	r2, [r3, #0]
				 break;
 8000c5e:	e012      	b.n	8000c86 <shootMissileINV+0xf2>
			 case 1:
			 	 countRand = 5;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <shootMissileINV+0x164>)
 8000c62:	2205      	movs	r2, #5
 8000c64:	601a      	str	r2, [r3, #0]
			 	break;
 8000c66:	e00e      	b.n	8000c86 <shootMissileINV+0xf2>
			 case 2:
			 	 countRand = 4;
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <shootMissileINV+0x164>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	601a      	str	r2, [r3, #0]
			 	break;
 8000c6e:	e00a      	b.n	8000c86 <shootMissileINV+0xf2>
			 case 3:
			 	 countRand = 0;
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <shootMissileINV+0x164>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
			 	break;
 8000c76:	e006      	b.n	8000c86 <shootMissileINV+0xf2>
			 case 4:
			 	 countRand = 1;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <shootMissileINV+0x164>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
			 	break;
 8000c7e:	e002      	b.n	8000c86 <shootMissileINV+0xf2>
			 case 5:
			 	 countRand = 3;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <shootMissileINV+0x164>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	601a      	str	r2, [r3, #0]
			 }

			 count4++;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <shootMissileINV+0x15c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <shootMissileINV+0x15c>)
 8000c8e:	6013      	str	r3, [r2, #0]
		 }

	if((invShoot == 1) && (yPosMINV <= (200-INV2_H)) && (yPosMINV != 0))
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <shootMissileINV+0x160>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d11c      	bne.n	8000cd4 <shootMissileINV+0x140>
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <shootMissileINV+0x170>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2bb8      	cmp	r3, #184	; 0xb8
 8000ca0:	d818      	bhi.n	8000cd4 <shootMissileINV+0x140>
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <shootMissileINV+0x170>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d014      	beq.n	8000cd4 <shootMissileINV+0x140>
		 {
			 BitBlitNew(FindSprite(Sprites_Data, MSL), xPosMINV, yPosMINV, MSL_W, MSL_H);
 8000caa:	2104      	movs	r1, #4
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <shootMissileINV+0x174>)
 8000cae:	f7ff fcb1 	bl	8000614 <FindSprite>
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <shootMissileINV+0x16c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <shootMissileINV+0x170>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f001 f9ba 	bl	800203c <BitBlitNew>

			 yPosMINV += 10;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <shootMissileINV+0x170>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	330a      	adds	r3, #10
 8000cce:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <shootMissileINV+0x170>)
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e008      	b.n	8000ce6 <shootMissileINV+0x152>
		 }
		 else
		 {
			 yPosMINV = 0;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <shootMissileINV+0x170>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
			 count4 = 0;
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <shootMissileINV+0x15c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
			 invShoot = 0;
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <shootMissileINV+0x160>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
		 }
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2001aaa8 	.word	0x2001aaa8
 8000cf4:	2001aaa4 	.word	0x2001aaa4
 8000cf8:	2001aa40 	.word	0x2001aa40
 8000cfc:	2001b1e4 	.word	0x2001b1e4
 8000d00:	2001b31c 	.word	0x2001b31c
 8000d04:	2001b318 	.word	0x2001b318
 8000d08:	2001aad0 	.word	0x2001aad0

08000d0c <shootMissile>:

void shootMissile()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af02      	add	r7, sp, #8
	 if(count3 == 0)
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <shootMissile+0x58>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10d      	bne.n	8000d36 <shootMissile+0x2a>
	 {
		xPosM = xPos + (SHP_W/2);
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <shootMissile+0x5c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	330b      	adds	r3, #11
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <shootMissile+0x60>)
 8000d22:	6013      	str	r3, [r2, #0]
		yPosM = yPos;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <shootMissile+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <shootMissile+0x68>)
 8000d2a:	6013      	str	r3, [r2, #0]
		count3++;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <shootMissile+0x58>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <shootMissile+0x58>)
 8000d34:	6013      	str	r3, [r2, #0]
	 }

	BitBlitNew(FindSprite(Sprites_Data, MSL), xPosM, yPosM, MSL_W, MSL_H);
 8000d36:	2104      	movs	r1, #4
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <shootMissile+0x6c>)
 8000d3a:	f7ff fc6b 	bl	8000614 <FindSprite>
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <shootMissile+0x60>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <shootMissile+0x68>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f001 f974 	bl	800203c <BitBlitNew>

	yPosM -= 15;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <shootMissile+0x68>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3b0f      	subs	r3, #15
 8000d5a:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <shootMissile+0x68>)
 8000d5c:	6013      	str	r3, [r2, #0]

}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2001aaa0 	.word	0x2001aaa0
 8000d68:	2001aa34 	.word	0x2001aa34
 8000d6c:	2001b1dc 	.word	0x2001b1dc
 8000d70:	2001aa38 	.word	0x2001aa38
 8000d74:	2001aa3c 	.word	0x2001aa3c
 8000d78:	2001aad0 	.word	0x2001aad0

08000d7c <moveInvaders>:

void moveInvaders()
{
 8000d7c:	b490      	push	{r4, r7}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	// rowToMove is declared and set at the top with the PV

	for(int j = 5; j >= 0; j--)
 8000d82:	2305      	movs	r3, #5
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	e026      	b.n	8000dd6 <moveInvaders+0x5a>
	{
		invGrid[rowToMove][j].xCoord += xPosAdd;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <moveInvaders+0xa8>)
 8000d8a:	6819      	ldr	r1, [r3, #0]
 8000d8c:	4826      	ldr	r0, [pc, #152]	; (8000e28 <moveInvaders+0xac>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	461a      	mov	r2, r3
 8000d92:	0052      	lsls	r2, r2, #1
 8000d94:	441a      	add	r2, r3
 8000d96:	0093      	lsls	r3, r2, #2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4413      	add	r3, r2
 8000da4:	4403      	add	r3, r0
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <moveInvaders+0xb0>)
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	4610      	mov	r0, r2
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <moveInvaders+0xa8>)
 8000db0:	6811      	ldr	r1, [r2, #0]
 8000db2:	4418      	add	r0, r3
 8000db4:	4c1c      	ldr	r4, [pc, #112]	; (8000e28 <moveInvaders+0xac>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	461a      	mov	r2, r3
 8000dba:	0052      	lsls	r2, r2, #1
 8000dbc:	441a      	add	r2, r3
 8000dbe:	0093      	lsls	r3, r2, #2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	4423      	add	r3, r4
 8000dce:	6018      	str	r0, [r3, #0]
	for(int j = 5; j >= 0; j--)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dad5      	bge.n	8000d88 <moveInvaders+0xc>
	}

	if(rowToMove == 0)
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <moveInvaders+0xa8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10d      	bne.n	8000e00 <moveInvaders+0x84>
	{
		Row[0].xCoord += xPosAdd; // makes sure that the row coords move with the invader coords (will change once invaders die)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <moveInvaders+0xb4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <moveInvaders+0xb0>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <moveInvaders+0xb4>)
 8000df0:	6013      	str	r3, [r2, #0]
		Row[0].xCoord2 += xPosAdd;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <moveInvaders+0xb4>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <moveInvaders+0xb0>)
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <moveInvaders+0xb4>)
 8000dfe:	6053      	str	r3, [r2, #4]
	}

	rowToMove--;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <moveInvaders+0xa8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <moveInvaders+0xa8>)
 8000e08:	6013      	str	r3, [r2, #0]

	if(rowToMove < 0) // starts process from bottom row again
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <moveInvaders+0xa8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	da02      	bge.n	8000e18 <moveInvaders+0x9c>
		rowToMove = 3;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <moveInvaders+0xa8>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	601a      	str	r2, [r3, #0]

}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc90      	pop	{r4, r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	2001aa44 	.word	0x2001aa44
 8000e28:	2001b1e4 	.word	0x2001b1e4
 8000e2c:	2001aa48 	.word	0x2001aa48
 8000e30:	2001b098 	.word	0x2001b098

08000e34 <emptyColCheck>:

void emptyColCheck()
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	if((invGrid[0][0].gameState == 0) && (invGrid[1][0].gameState == 0) && (invGrid[2][0].gameState == 0) && (invGrid[3][0].gameState == 0)) // runs through the grid to check if invaders are dead
 8000e38:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <emptyColCheck+0x110>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d110      	bne.n	8000e62 <emptyColCheck+0x2e>
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <emptyColCheck+0x110>)
 8000e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10c      	bne.n	8000e62 <emptyColCheck+0x2e>
 8000e48:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <emptyColCheck+0x110>)
 8000e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d107      	bne.n	8000e62 <emptyColCheck+0x2e>
 8000e52:	4b3c      	ldr	r3, [pc, #240]	; (8000f44 <emptyColCheck+0x110>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <emptyColCheck+0x2e>
		isEmptyCol[0] = 1; // column is empty
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <emptyColCheck+0x114>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
	if((invGrid[0][1].gameState == 0) && (invGrid[1][1].gameState == 0) && (invGrid[2][1].gameState == 0) && (invGrid[3][1].gameState == 0))
 8000e62:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <emptyColCheck+0x110>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d110      	bne.n	8000e8c <emptyColCheck+0x58>
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <emptyColCheck+0x110>)
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <emptyColCheck+0x58>
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <emptyColCheck+0x110>)
 8000e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d107      	bne.n	8000e8c <emptyColCheck+0x58>
 8000e7c:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <emptyColCheck+0x110>)
 8000e7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <emptyColCheck+0x58>
		isEmptyCol[1] = 1;
 8000e86:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <emptyColCheck+0x114>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	705a      	strb	r2, [r3, #1]
	if((invGrid[0][2].gameState == 0) && (invGrid[1][2].gameState == 0) && (invGrid[2][2].gameState == 0) && (invGrid[3][2].gameState == 0))
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <emptyColCheck+0x110>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d110      	bne.n	8000eb6 <emptyColCheck+0x82>
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <emptyColCheck+0x110>)
 8000e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10c      	bne.n	8000eb6 <emptyColCheck+0x82>
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <emptyColCheck+0x110>)
 8000e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d107      	bne.n	8000eb6 <emptyColCheck+0x82>
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <emptyColCheck+0x110>)
 8000ea8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <emptyColCheck+0x82>
		isEmptyCol[2] = 1;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <emptyColCheck+0x114>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	709a      	strb	r2, [r3, #2]
	if((invGrid[0][3].gameState == 0) && (invGrid[1][3].gameState == 0) && (invGrid[2][3].gameState == 0) && (invGrid[3][3].gameState == 0))
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <emptyColCheck+0x110>)
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d110      	bne.n	8000ee0 <emptyColCheck+0xac>
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <emptyColCheck+0x110>)
 8000ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <emptyColCheck+0xac>
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <emptyColCheck+0x110>)
 8000ec8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d107      	bne.n	8000ee0 <emptyColCheck+0xac>
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <emptyColCheck+0x110>)
 8000ed2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <emptyColCheck+0xac>
		isEmptyCol[3] = 1;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <emptyColCheck+0x114>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	70da      	strb	r2, [r3, #3]
	if((invGrid[0][4].gameState == 0) && (invGrid[1][4].gameState == 0) && (invGrid[2][4].gameState == 0) && (invGrid[3][4].gameState == 0))
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <emptyColCheck+0x110>)
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d111      	bne.n	8000f0c <emptyColCheck+0xd8>
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <emptyColCheck+0x110>)
 8000eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <emptyColCheck+0xd8>
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <emptyColCheck+0x110>)
 8000ef4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <emptyColCheck+0xd8>
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <emptyColCheck+0x110>)
 8000efe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <emptyColCheck+0xd8>
		isEmptyCol[4] = 1;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <emptyColCheck+0x114>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	711a      	strb	r2, [r3, #4]
	if((invGrid[0][5].gameState == 0) && (invGrid[1][5].gameState == 0) && (invGrid[2][5].gameState == 0) && (invGrid[3][5].gameState == 0))
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <emptyColCheck+0x110>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d111      	bne.n	8000f38 <emptyColCheck+0x104>
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <emptyColCheck+0x110>)
 8000f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <emptyColCheck+0x104>
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <emptyColCheck+0x110>)
 8000f20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d107      	bne.n	8000f38 <emptyColCheck+0x104>
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <emptyColCheck+0x110>)
 8000f2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <emptyColCheck+0x104>
		isEmptyCol[5] = 1;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <emptyColCheck+0x114>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	715a      	strb	r2, [r3, #5]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2001b1e4 	.word	0x2001b1e4
 8000f48:	2001aab4 	.word	0x2001aab4

08000f4c <emptyRowCheck>:

void emptyRowCheck()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	if((invGrid[0][0].gameState == 0) && (invGrid[0][1].gameState == 0) && (invGrid[0][2].gameState == 0) && (invGrid[0][3].gameState == 0) && (invGrid[0][4].gameState == 0) && (invGrid[0][5].gameState == 0)) // runs through the grid to check if invaders are dead
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <emptyRowCheck+0x104>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d116      	bne.n	8000f86 <emptyRowCheck+0x3a>
 8000f58:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <emptyRowCheck+0x104>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d112      	bne.n	8000f86 <emptyRowCheck+0x3a>
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <emptyRowCheck+0x104>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10e      	bne.n	8000f86 <emptyRowCheck+0x3a>
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <emptyRowCheck+0x104>)
 8000f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <emptyRowCheck+0x3a>
 8000f70:	4b37      	ldr	r3, [pc, #220]	; (8001050 <emptyRowCheck+0x104>)
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <emptyRowCheck+0x3a>
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <emptyRowCheck+0x104>)
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <emptyRowCheck+0x3a>
		isEmptyRow[0] = 1; // row is empty
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <emptyRowCheck+0x108>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
	if((invGrid[1][0].gameState == 0) && (invGrid[1][1].gameState == 0) && (invGrid[1][2].gameState == 0) && (invGrid[1][3].gameState == 0) && (invGrid[1][4].gameState == 0) && (invGrid[1][5].gameState == 0))
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <emptyRowCheck+0x104>)
 8000f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <emptyRowCheck+0x74>
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <emptyRowCheck+0x104>)
 8000f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d114      	bne.n	8000fc0 <emptyRowCheck+0x74>
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <emptyRowCheck+0x104>)
 8000f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d110      	bne.n	8000fc0 <emptyRowCheck+0x74>
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <emptyRowCheck+0x104>)
 8000fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <emptyRowCheck+0x74>
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <emptyRowCheck+0x104>)
 8000fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d107      	bne.n	8000fc0 <emptyRowCheck+0x74>
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <emptyRowCheck+0x104>)
 8000fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <emptyRowCheck+0x74>
		isEmptyRow[1] = 1;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <emptyRowCheck+0x108>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	605a      	str	r2, [r3, #4]
	if((invGrid[2][0].gameState == 0) && (invGrid[2][1].gameState == 0) && (invGrid[2][2].gameState == 0) && (invGrid[2][3].gameState == 0) && (invGrid[2][4].gameState == 0) && (invGrid[2][5].gameState == 0))
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <emptyRowCheck+0x104>)
 8000fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11b      	bne.n	8001002 <emptyRowCheck+0xb6>
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <emptyRowCheck+0x104>)
 8000fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d116      	bne.n	8001002 <emptyRowCheck+0xb6>
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <emptyRowCheck+0x104>)
 8000fd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d111      	bne.n	8001002 <emptyRowCheck+0xb6>
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <emptyRowCheck+0x104>)
 8000fe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10c      	bne.n	8001002 <emptyRowCheck+0xb6>
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <emptyRowCheck+0x104>)
 8000fea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d107      	bne.n	8001002 <emptyRowCheck+0xb6>
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <emptyRowCheck+0x104>)
 8000ff4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <emptyRowCheck+0xb6>
		isEmptyRow[2] = 1;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <emptyRowCheck+0x108>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	609a      	str	r2, [r3, #8]
	if((invGrid[3][0].gameState == 0) && (invGrid[3][1].gameState == 0) && (invGrid[3][2].gameState == 0) && (invGrid[3][3].gameState == 0) && (invGrid[3][4].gameState == 0) && (invGrid[3][5].gameState == 0))
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <emptyRowCheck+0x104>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11b      	bne.n	8001044 <emptyRowCheck+0xf8>
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <emptyRowCheck+0x104>)
 800100e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001012:	2b00      	cmp	r3, #0
 8001014:	d116      	bne.n	8001044 <emptyRowCheck+0xf8>
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <emptyRowCheck+0x104>)
 8001018:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d111      	bne.n	8001044 <emptyRowCheck+0xf8>
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <emptyRowCheck+0x104>)
 8001022:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <emptyRowCheck+0xf8>
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <emptyRowCheck+0x104>)
 800102c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001030:	2b00      	cmp	r3, #0
 8001032:	d107      	bne.n	8001044 <emptyRowCheck+0xf8>
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <emptyRowCheck+0x104>)
 8001036:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <emptyRowCheck+0xf8>
		isEmptyRow[3] = 1;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <emptyRowCheck+0x108>)
 8001040:	2201      	movs	r2, #1
 8001042:	60da      	str	r2, [r3, #12]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2001b1e4 	.word	0x2001b1e4
 8001054:	2001aac0 	.word	0x2001aac0

08001058 <yoffsetFunc>:

void yoffsetFunc()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	emptyRowCheck();
 800105c:	f7ff ff76 	bl	8000f4c <emptyRowCheck>

	if((isEmptyRow[3] == 1) && latchabc)
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <yoffsetFunc+0x8c>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d10c      	bne.n	8001082 <yoffsetFunc+0x2a>
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <yoffsetFunc+0x90>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <yoffsetFunc+0x2a>
	{
		yOffset -= 24;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <yoffsetFunc+0x94>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3b18      	subs	r3, #24
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <yoffsetFunc+0x94>)
 8001078:	6013      	str	r3, [r2, #0]
		latchabc = 0;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <yoffsetFunc+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e02d      	b.n	80010de <yoffsetFunc+0x86>
	}
	else if ((isEmptyRow[3] == 1) && (isEmptyRow[2] == 1) && latchab)
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <yoffsetFunc+0x8c>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d110      	bne.n	80010ac <yoffsetFunc+0x54>
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <yoffsetFunc+0x8c>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10c      	bne.n	80010ac <yoffsetFunc+0x54>
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <yoffsetFunc+0x98>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <yoffsetFunc+0x54>
	{
		yOffset -= 24;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <yoffsetFunc+0x94>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3b18      	subs	r3, #24
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <yoffsetFunc+0x94>)
 80010a2:	6013      	str	r3, [r2, #0]
		latchab = 0;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <yoffsetFunc+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e018      	b.n	80010de <yoffsetFunc+0x86>
	}
	else if ((isEmptyRow[3] == 1) && (isEmptyRow[2] == 1) && (isEmptyRow[1] == 1) && latcha)
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <yoffsetFunc+0x8c>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d114      	bne.n	80010de <yoffsetFunc+0x86>
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <yoffsetFunc+0x8c>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d110      	bne.n	80010de <yoffsetFunc+0x86>
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <yoffsetFunc+0x8c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10c      	bne.n	80010de <yoffsetFunc+0x86>
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <yoffsetFunc+0x9c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <yoffsetFunc+0x86>
	{
		yOffset -= 24;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <yoffsetFunc+0x94>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b18      	subs	r3, #24
 80010d2:	4a06      	ldr	r2, [pc, #24]	; (80010ec <yoffsetFunc+0x94>)
 80010d4:	6013      	str	r3, [r2, #0]
		latcha = 0;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <yoffsetFunc+0x9c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
	}
}
 80010dc:	e7ff      	b.n	80010de <yoffsetFunc+0x86>
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2001aac0 	.word	0x2001aac0
 80010e8:	2001aa68 	.word	0x2001aa68
 80010ec:	2001aa64 	.word	0x2001aa64
 80010f0:	2001aa69 	.word	0x2001aa69
 80010f4:	2001aa6a 	.word	0x2001aa6a

080010f8 <offsetFunc>:

void offsetFunc()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	emptyColCheck();
 80010fc:	f7ff fe9a 	bl	8000e34 <emptyColCheck>

	if((isEmptyCol[0] == 1) && (isEmptyCol[1] == 1) && (isEmptyCol[2] == 1) && (isEmptyCol[3] == 1) && (isEmptyCol[4] == 1) && latch01234) //moves the row x coord by checking columns from left and decreases offset to compensate
 8001100:	4b91      	ldr	r3, [pc, #580]	; (8001348 <offsetFunc+0x250>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d12c      	bne.n	8001162 <offsetFunc+0x6a>
 8001108:	4b8f      	ldr	r3, [pc, #572]	; (8001348 <offsetFunc+0x250>)
 800110a:	785b      	ldrb	r3, [r3, #1]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d128      	bne.n	8001162 <offsetFunc+0x6a>
 8001110:	4b8d      	ldr	r3, [pc, #564]	; (8001348 <offsetFunc+0x250>)
 8001112:	789b      	ldrb	r3, [r3, #2]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d124      	bne.n	8001162 <offsetFunc+0x6a>
 8001118:	4b8b      	ldr	r3, [pc, #556]	; (8001348 <offsetFunc+0x250>)
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d120      	bne.n	8001162 <offsetFunc+0x6a>
 8001120:	4b89      	ldr	r3, [pc, #548]	; (8001348 <offsetFunc+0x250>)
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d11c      	bne.n	8001162 <offsetFunc+0x6a>
 8001128:	4b88      	ldr	r3, [pc, #544]	; (800134c <offsetFunc+0x254>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d018      	beq.n	8001162 <offsetFunc+0x6a>
	{
		prevRowxCoord = Row[0].xCoord;
 8001130:	4b87      	ldr	r3, [pc, #540]	; (8001350 <offsetFunc+0x258>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b87      	ldr	r3, [pc, #540]	; (8001354 <offsetFunc+0x25c>)
 8001138:	601a      	str	r2, [r3, #0]
		Row[0].xCoord = invGrid[0][5].xCoord;
 800113a:	4b87      	ldr	r3, [pc, #540]	; (8001358 <offsetFunc+0x260>)
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	4a84      	ldr	r2, [pc, #528]	; (8001350 <offsetFunc+0x258>)
 8001140:	6013      	str	r3, [r2, #0]
		offset -= (Row[0].xCoord - prevRowxCoord);
 8001142:	4b84      	ldr	r3, [pc, #528]	; (8001354 <offsetFunc+0x25c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b81      	ldr	r3, [pc, #516]	; (8001350 <offsetFunc+0x258>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a83      	ldr	r2, [pc, #524]	; (800135c <offsetFunc+0x264>)
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	4413      	add	r3, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4b81      	ldr	r3, [pc, #516]	; (800135c <offsetFunc+0x264>)
 8001158:	601a      	str	r2, [r3, #0]
		latch01234 = 0;
 800115a:	4b7c      	ldr	r3, [pc, #496]	; (800134c <offsetFunc+0x254>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e0c2      	b.n	80012e8 <offsetFunc+0x1f0>
	}
	else if((isEmptyCol[0] == 1) && (isEmptyCol[1] == 1) && (isEmptyCol[2] == 1) && (isEmptyCol[3] == 1) && latch01234 && latch0123)
 8001162:	4b79      	ldr	r3, [pc, #484]	; (8001348 <offsetFunc+0x250>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d12c      	bne.n	80011c4 <offsetFunc+0xcc>
 800116a:	4b77      	ldr	r3, [pc, #476]	; (8001348 <offsetFunc+0x250>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d128      	bne.n	80011c4 <offsetFunc+0xcc>
 8001172:	4b75      	ldr	r3, [pc, #468]	; (8001348 <offsetFunc+0x250>)
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d124      	bne.n	80011c4 <offsetFunc+0xcc>
 800117a:	4b73      	ldr	r3, [pc, #460]	; (8001348 <offsetFunc+0x250>)
 800117c:	78db      	ldrb	r3, [r3, #3]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d120      	bne.n	80011c4 <offsetFunc+0xcc>
 8001182:	4b72      	ldr	r3, [pc, #456]	; (800134c <offsetFunc+0x254>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01c      	beq.n	80011c4 <offsetFunc+0xcc>
 800118a:	4b75      	ldr	r3, [pc, #468]	; (8001360 <offsetFunc+0x268>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d018      	beq.n	80011c4 <offsetFunc+0xcc>
	{
		prevRowxCoord = Row[0].xCoord;
 8001192:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <offsetFunc+0x258>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b6e      	ldr	r3, [pc, #440]	; (8001354 <offsetFunc+0x25c>)
 800119a:	601a      	str	r2, [r3, #0]
		Row[0].xCoord = invGrid[0][4].xCoord;
 800119c:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <offsetFunc+0x260>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a6b      	ldr	r2, [pc, #428]	; (8001350 <offsetFunc+0x258>)
 80011a2:	6013      	str	r3, [r2, #0]
		offset -= (Row[0].xCoord - prevRowxCoord);
 80011a4:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <offsetFunc+0x25c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b69      	ldr	r3, [pc, #420]	; (8001350 <offsetFunc+0x258>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4a6a      	ldr	r2, [pc, #424]	; (800135c <offsetFunc+0x264>)
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b68      	ldr	r3, [pc, #416]	; (800135c <offsetFunc+0x264>)
 80011ba:	601a      	str	r2, [r3, #0]
		latch0123 = 0;
 80011bc:	4b68      	ldr	r3, [pc, #416]	; (8001360 <offsetFunc+0x268>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e091      	b.n	80012e8 <offsetFunc+0x1f0>
	}
	else if((isEmptyCol[0] == 1) && (isEmptyCol[1] == 1) && (isEmptyCol[2] == 1) && latch01234 && latch0123 && latch012)
 80011c4:	4b60      	ldr	r3, [pc, #384]	; (8001348 <offsetFunc+0x250>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d12c      	bne.n	8001226 <offsetFunc+0x12e>
 80011cc:	4b5e      	ldr	r3, [pc, #376]	; (8001348 <offsetFunc+0x250>)
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d128      	bne.n	8001226 <offsetFunc+0x12e>
 80011d4:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <offsetFunc+0x250>)
 80011d6:	789b      	ldrb	r3, [r3, #2]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d124      	bne.n	8001226 <offsetFunc+0x12e>
 80011dc:	4b5b      	ldr	r3, [pc, #364]	; (800134c <offsetFunc+0x254>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <offsetFunc+0x12e>
 80011e4:	4b5e      	ldr	r3, [pc, #376]	; (8001360 <offsetFunc+0x268>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d01c      	beq.n	8001226 <offsetFunc+0x12e>
 80011ec:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <offsetFunc+0x26c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d018      	beq.n	8001226 <offsetFunc+0x12e>
	{
		prevRowxCoord = Row[0].xCoord;
 80011f4:	4b56      	ldr	r3, [pc, #344]	; (8001350 <offsetFunc+0x258>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <offsetFunc+0x25c>)
 80011fc:	601a      	str	r2, [r3, #0]
		Row[0].xCoord = invGrid[0][3].xCoord;
 80011fe:	4b56      	ldr	r3, [pc, #344]	; (8001358 <offsetFunc+0x260>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	4a53      	ldr	r2, [pc, #332]	; (8001350 <offsetFunc+0x258>)
 8001204:	6013      	str	r3, [r2, #0]
		offset -= (Row[0].xCoord - prevRowxCoord);
 8001206:	4b53      	ldr	r3, [pc, #332]	; (8001354 <offsetFunc+0x25c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <offsetFunc+0x258>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4a52      	ldr	r2, [pc, #328]	; (800135c <offsetFunc+0x264>)
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4413      	add	r3, r2
 8001218:	461a      	mov	r2, r3
 800121a:	4b50      	ldr	r3, [pc, #320]	; (800135c <offsetFunc+0x264>)
 800121c:	601a      	str	r2, [r3, #0]
		latch012 = 0;
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <offsetFunc+0x26c>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e060      	b.n	80012e8 <offsetFunc+0x1f0>
	}
	else if((isEmptyCol[0] == 1) && (isEmptyCol[1] == 1) && latch01234 && latch0123 && latch012 && latch01)
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <offsetFunc+0x250>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d12c      	bne.n	8001288 <offsetFunc+0x190>
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <offsetFunc+0x250>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d128      	bne.n	8001288 <offsetFunc+0x190>
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <offsetFunc+0x254>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d024      	beq.n	8001288 <offsetFunc+0x190>
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <offsetFunc+0x268>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d020      	beq.n	8001288 <offsetFunc+0x190>
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <offsetFunc+0x26c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01c      	beq.n	8001288 <offsetFunc+0x190>
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <offsetFunc+0x270>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d018      	beq.n	8001288 <offsetFunc+0x190>
	{
		prevRowxCoord = Row[0].xCoord;
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <offsetFunc+0x258>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <offsetFunc+0x25c>)
 800125e:	601a      	str	r2, [r3, #0]
		Row[0].xCoord = invGrid[0][2].xCoord;
 8001260:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <offsetFunc+0x260>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a3a      	ldr	r2, [pc, #232]	; (8001350 <offsetFunc+0x258>)
 8001266:	6013      	str	r3, [r2, #0]
		offset -= (Row[0].xCoord - prevRowxCoord);
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <offsetFunc+0x25c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <offsetFunc+0x258>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	4a39      	ldr	r2, [pc, #228]	; (800135c <offsetFunc+0x264>)
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	4413      	add	r3, r2
 800127a:	461a      	mov	r2, r3
 800127c:	4b37      	ldr	r3, [pc, #220]	; (800135c <offsetFunc+0x264>)
 800127e:	601a      	str	r2, [r3, #0]
		latch01 = 0;
 8001280:	4b39      	ldr	r3, [pc, #228]	; (8001368 <offsetFunc+0x270>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e02f      	b.n	80012e8 <offsetFunc+0x1f0>
	}
	else if((isEmptyCol[0] == 1) && latch01234 && latch0123 && latch012 && latch01 && latch0)
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <offsetFunc+0x250>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d12b      	bne.n	80012e8 <offsetFunc+0x1f0>
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <offsetFunc+0x254>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d027      	beq.n	80012e8 <offsetFunc+0x1f0>
 8001298:	4b31      	ldr	r3, [pc, #196]	; (8001360 <offsetFunc+0x268>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d023      	beq.n	80012e8 <offsetFunc+0x1f0>
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <offsetFunc+0x26c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01f      	beq.n	80012e8 <offsetFunc+0x1f0>
 80012a8:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <offsetFunc+0x270>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d01b      	beq.n	80012e8 <offsetFunc+0x1f0>
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <offsetFunc+0x274>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d017      	beq.n	80012e8 <offsetFunc+0x1f0>
	{
		prevRowxCoord = Row[0].xCoord;
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <offsetFunc+0x258>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <offsetFunc+0x25c>)
 80012c0:	601a      	str	r2, [r3, #0]
		Row[0].xCoord = invGrid[0][1].xCoord;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <offsetFunc+0x260>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <offsetFunc+0x258>)
 80012c8:	6013      	str	r3, [r2, #0]
		offset -= (Row[0].xCoord - prevRowxCoord);
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <offsetFunc+0x25c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <offsetFunc+0x258>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <offsetFunc+0x264>)
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <offsetFunc+0x264>)
 80012e0:	601a      	str	r2, [r3, #0]
		latch0 = 0;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <offsetFunc+0x274>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
	}


	if((isEmptyCol[5] == 1) && (isEmptyCol[4] == 1) && (isEmptyCol[3] == 1) && (isEmptyCol[2] == 1) && (isEmptyCol[1] == 1) && latch54321) //checking columns from right and decreases offset to compensate
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <offsetFunc+0x250>)
 80012ea:	795b      	ldrb	r3, [r3, #5]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d143      	bne.n	8001378 <offsetFunc+0x280>
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <offsetFunc+0x250>)
 80012f2:	791b      	ldrb	r3, [r3, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d13f      	bne.n	8001378 <offsetFunc+0x280>
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <offsetFunc+0x250>)
 80012fa:	78db      	ldrb	r3, [r3, #3]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d13b      	bne.n	8001378 <offsetFunc+0x280>
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <offsetFunc+0x250>)
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d137      	bne.n	8001378 <offsetFunc+0x280>
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <offsetFunc+0x250>)
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d133      	bne.n	8001378 <offsetFunc+0x280>
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <offsetFunc+0x278>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d02f      	beq.n	8001378 <offsetFunc+0x280>
	{
		prevRowxCoordR = Row[0].xCoord2;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <offsetFunc+0x258>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	461a      	mov	r2, r3
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <offsetFunc+0x27c>)
 8001320:	601a      	str	r2, [r3, #0]
		Row[0].xCoord2 = invGrid[0][0].xCoord;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <offsetFunc+0x260>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <offsetFunc+0x258>)
 8001328:	6053      	str	r3, [r2, #4]
		offset -= (prevRowxCoordR - Row[0].xCoord2);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <offsetFunc+0x258>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <offsetFunc+0x27c>)
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <offsetFunc+0x264>)
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	4413      	add	r3, r2
 800133a:	461a      	mov	r2, r3
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <offsetFunc+0x264>)
 800133e:	601a      	str	r2, [r3, #0]
		latch54321 = 0;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <offsetFunc+0x278>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	e0d7      	b.n	80014f8 <offsetFunc+0x400>
 8001348:	2001aab4 	.word	0x2001aab4
 800134c:	2001aa59 	.word	0x2001aa59
 8001350:	2001b098 	.word	0x2001b098
 8001354:	2001b1d8 	.word	0x2001b1d8
 8001358:	2001b1e4 	.word	0x2001b1e4
 800135c:	2001aa50 	.word	0x2001aa50
 8001360:	2001aa5a 	.word	0x2001aa5a
 8001364:	2001aa5b 	.word	0x2001aa5b
 8001368:	2001aa5c 	.word	0x2001aa5c
 800136c:	2001aa5d 	.word	0x2001aa5d
 8001370:	2001aa54 	.word	0x2001aa54
 8001374:	2001b308 	.word	0x2001b308
	}
	else if((isEmptyCol[5] == 1) && (isEmptyCol[4] == 1) && (isEmptyCol[3] == 1) && (isEmptyCol[2] == 1) && latch54321 && latch5432)
 8001378:	4b60      	ldr	r3, [pc, #384]	; (80014fc <offsetFunc+0x404>)
 800137a:	795b      	ldrb	r3, [r3, #5]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d12b      	bne.n	80013d8 <offsetFunc+0x2e0>
 8001380:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <offsetFunc+0x404>)
 8001382:	791b      	ldrb	r3, [r3, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d127      	bne.n	80013d8 <offsetFunc+0x2e0>
 8001388:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <offsetFunc+0x404>)
 800138a:	78db      	ldrb	r3, [r3, #3]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d123      	bne.n	80013d8 <offsetFunc+0x2e0>
 8001390:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <offsetFunc+0x404>)
 8001392:	789b      	ldrb	r3, [r3, #2]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d11f      	bne.n	80013d8 <offsetFunc+0x2e0>
 8001398:	4b59      	ldr	r3, [pc, #356]	; (8001500 <offsetFunc+0x408>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01b      	beq.n	80013d8 <offsetFunc+0x2e0>
 80013a0:	4b58      	ldr	r3, [pc, #352]	; (8001504 <offsetFunc+0x40c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d017      	beq.n	80013d8 <offsetFunc+0x2e0>
	{
		prevRowxCoordR = Row[0].xCoord2;
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <offsetFunc+0x410>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b57      	ldr	r3, [pc, #348]	; (800150c <offsetFunc+0x414>)
 80013b0:	601a      	str	r2, [r3, #0]
		Row[0].xCoord2 = invGrid[0][1].xCoord;
 80013b2:	4b57      	ldr	r3, [pc, #348]	; (8001510 <offsetFunc+0x418>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4a54      	ldr	r2, [pc, #336]	; (8001508 <offsetFunc+0x410>)
 80013b8:	6053      	str	r3, [r2, #4]
		offset -= (prevRowxCoordR - Row[0].xCoord2);
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <offsetFunc+0x410>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a53      	ldr	r2, [pc, #332]	; (800150c <offsetFunc+0x414>)
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	4a53      	ldr	r2, [pc, #332]	; (8001514 <offsetFunc+0x41c>)
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <offsetFunc+0x41c>)
 80013ce:	601a      	str	r2, [r3, #0]
		latch5432 = 0;
 80013d0:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <offsetFunc+0x40c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e08f      	b.n	80014f8 <offsetFunc+0x400>
	}
	else if((isEmptyCol[5] == 1) && (isEmptyCol[4] == 1) && (isEmptyCol[3] == 1) && latch54321 && latch5432 && latch543)
 80013d8:	4b48      	ldr	r3, [pc, #288]	; (80014fc <offsetFunc+0x404>)
 80013da:	795b      	ldrb	r3, [r3, #5]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d12b      	bne.n	8001438 <offsetFunc+0x340>
 80013e0:	4b46      	ldr	r3, [pc, #280]	; (80014fc <offsetFunc+0x404>)
 80013e2:	791b      	ldrb	r3, [r3, #4]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d127      	bne.n	8001438 <offsetFunc+0x340>
 80013e8:	4b44      	ldr	r3, [pc, #272]	; (80014fc <offsetFunc+0x404>)
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d123      	bne.n	8001438 <offsetFunc+0x340>
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <offsetFunc+0x408>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01f      	beq.n	8001438 <offsetFunc+0x340>
 80013f8:	4b42      	ldr	r3, [pc, #264]	; (8001504 <offsetFunc+0x40c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01b      	beq.n	8001438 <offsetFunc+0x340>
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <offsetFunc+0x420>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d017      	beq.n	8001438 <offsetFunc+0x340>
	{
		prevRowxCoordR = Row[0].xCoord2;
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <offsetFunc+0x410>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	461a      	mov	r2, r3
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <offsetFunc+0x414>)
 8001410:	601a      	str	r2, [r3, #0]
		Row[0].xCoord2 = invGrid[0][2].xCoord;
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <offsetFunc+0x418>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <offsetFunc+0x410>)
 8001418:	6053      	str	r3, [r2, #4]
		offset -= (prevRowxCoordR - Row[0].xCoord2);
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <offsetFunc+0x410>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a3b      	ldr	r2, [pc, #236]	; (800150c <offsetFunc+0x414>)
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <offsetFunc+0x41c>)
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	4413      	add	r3, r2
 800142a:	461a      	mov	r2, r3
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <offsetFunc+0x41c>)
 800142e:	601a      	str	r2, [r3, #0]
		latch543 = 0;
 8001430:	4b39      	ldr	r3, [pc, #228]	; (8001518 <offsetFunc+0x420>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e05f      	b.n	80014f8 <offsetFunc+0x400>
	}
	else if((isEmptyCol[5] == 1) && (isEmptyCol[4] == 1) && latch54321 && latch5432 && latch543 && latch54)
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <offsetFunc+0x404>)
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d12b      	bne.n	8001498 <offsetFunc+0x3a0>
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <offsetFunc+0x404>)
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d127      	bne.n	8001498 <offsetFunc+0x3a0>
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <offsetFunc+0x408>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d023      	beq.n	8001498 <offsetFunc+0x3a0>
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <offsetFunc+0x40c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01f      	beq.n	8001498 <offsetFunc+0x3a0>
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <offsetFunc+0x420>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01b      	beq.n	8001498 <offsetFunc+0x3a0>
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <offsetFunc+0x424>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d017      	beq.n	8001498 <offsetFunc+0x3a0>
	{
		prevRowxCoordR = Row[0].xCoord2;
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <offsetFunc+0x410>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	461a      	mov	r2, r3
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <offsetFunc+0x414>)
 8001470:	601a      	str	r2, [r3, #0]
		Row[0].xCoord2 = invGrid[0][3].xCoord;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <offsetFunc+0x418>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	4a24      	ldr	r2, [pc, #144]	; (8001508 <offsetFunc+0x410>)
 8001478:	6053      	str	r3, [r2, #4]
		offset -= (prevRowxCoordR - Row[0].xCoord2);
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <offsetFunc+0x410>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <offsetFunc+0x414>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	4a23      	ldr	r2, [pc, #140]	; (8001514 <offsetFunc+0x41c>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4413      	add	r3, r2
 800148a:	461a      	mov	r2, r3
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <offsetFunc+0x41c>)
 800148e:	601a      	str	r2, [r3, #0]
		latch54 = 0;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <offsetFunc+0x424>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e02f      	b.n	80014f8 <offsetFunc+0x400>
	}
	else if((isEmptyCol[5] == 1) && latch54321 && latch5432 && latch543 && latch54 && latch5)
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <offsetFunc+0x404>)
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d12b      	bne.n	80014f8 <offsetFunc+0x400>
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <offsetFunc+0x408>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d027      	beq.n	80014f8 <offsetFunc+0x400>
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <offsetFunc+0x40c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d023      	beq.n	80014f8 <offsetFunc+0x400>
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <offsetFunc+0x420>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01f      	beq.n	80014f8 <offsetFunc+0x400>
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <offsetFunc+0x424>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01b      	beq.n	80014f8 <offsetFunc+0x400>
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <offsetFunc+0x428>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d017      	beq.n	80014f8 <offsetFunc+0x400>
	{
		prevRowxCoordR = Row[0].xCoord2;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <offsetFunc+0x410>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <offsetFunc+0x414>)
 80014d0:	601a      	str	r2, [r3, #0]
		Row[0].xCoord2 = invGrid[0][4].xCoord;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <offsetFunc+0x418>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <offsetFunc+0x410>)
 80014d8:	6053      	str	r3, [r2, #4]
		offset -= (prevRowxCoordR - Row[0].xCoord2);
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <offsetFunc+0x410>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <offsetFunc+0x414>)
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <offsetFunc+0x41c>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <offsetFunc+0x41c>)
 80014ee:	601a      	str	r2, [r3, #0]
		latch5 = 0;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <offsetFunc+0x428>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
	}
}
 80014f6:	e7ff      	b.n	80014f8 <offsetFunc+0x400>
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2001aab4 	.word	0x2001aab4
 8001500:	2001aa54 	.word	0x2001aa54
 8001504:	2001aa55 	.word	0x2001aa55
 8001508:	2001b098 	.word	0x2001b098
 800150c:	2001b308 	.word	0x2001b308
 8001510:	2001b1e4 	.word	0x2001b1e4
 8001514:	2001aa50 	.word	0x2001aa50
 8001518:	2001aa56 	.word	0x2001aa56
 800151c:	2001aa57 	.word	0x2001aa57
 8001520:	2001aa58 	.word	0x2001aa58

08001524 <shiftDown>:

void shiftDown()
{
 8001524:	b490      	push	{r4, r7}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	for(int i = 3; i >= 0; i--)
 800152a:	2303      	movs	r3, #3
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	e02e      	b.n	800158e <shiftDown+0x6a>
	{
		for(int j = 5; j >= 0; j--)
 8001530:	2305      	movs	r3, #5
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	e025      	b.n	8001582 <shiftDown+0x5e>
		{
			invGrid[i][j].yCoord += yPosAdd;
 8001536:	481d      	ldr	r0, [pc, #116]	; (80015ac <shiftDown+0x88>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	461a      	mov	r2, r3
 800153e:	0052      	lsls	r2, r2, #1
 8001540:	441a      	add	r2, r3
 8001542:	0093      	lsls	r3, r2, #2
 8001544:	461a      	mov	r2, r3
 8001546:	460b      	mov	r3, r1
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	4403      	add	r3, r0
 8001552:	3304      	adds	r3, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <shiftDown+0x8c>)
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	1898      	adds	r0, r3, r2
 800155c:	4c13      	ldr	r4, [pc, #76]	; (80015ac <shiftDown+0x88>)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	461a      	mov	r2, r3
 8001564:	0052      	lsls	r2, r2, #1
 8001566:	441a      	add	r2, r3
 8001568:	0093      	lsls	r3, r2, #2
 800156a:	461a      	mov	r2, r3
 800156c:	460b      	mov	r3, r1
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	4423      	add	r3, r4
 8001578:	3304      	adds	r3, #4
 800157a:	6018      	str	r0, [r3, #0]
		for(int j = 5; j >= 0; j--)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3b01      	subs	r3, #1
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	dad6      	bge.n	8001536 <shiftDown+0x12>
	for(int i = 3; i >= 0; i--)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	dacd      	bge.n	8001530 <shiftDown+0xc>
		}
	}

	Row[0].yCoord += yPosAdd;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <shiftDown+0x90>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <shiftDown+0x8c>)
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <shiftDown+0x90>)
 80015a0:	6093      	str	r3, [r2, #8]
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc90      	pop	{r4, r7}
 80015aa:	4770      	bx	lr
 80015ac:	2001b1e4 	.word	0x2001b1e4
 80015b0:	2001aa4c 	.word	0x2001aa4c
 80015b4:	2001b098 	.word	0x2001b098

080015b8 <drawInvaders>:

void drawInvaders()
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8

	for(int i = 3; i >= 0; i--)
 80015be:	2303      	movs	r3, #3
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e146      	b.n	8001852 <drawInvaders+0x29a>
	{
		for(int j = 5; j >= 0; j--)
 80015c4:	2305      	movs	r3, #5
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	e13c      	b.n	8001844 <drawInvaders+0x28c>
		{
			if(((yPosM <= (invGrid[i][j].yCoord+INV2_H)) && (yPosM >= invGrid[i][j].yCoord)) && ((xPosM >= (invGrid[i][j].xCoord)) && xPosM <= (invGrid[i][j].xCoord+INV2_W)) && (invGrid[i][j].gameState != 0)) // last condition is so that blank invaders dont cause the missile to dissapear
 80015ca:	486b      	ldr	r0, [pc, #428]	; (8001778 <drawInvaders+0x1c0>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	0052      	lsls	r2, r2, #1
 80015d4:	441a      	add	r2, r3
 80015d6:	0093      	lsls	r3, r2, #2
 80015d8:	461a      	mov	r2, r3
 80015da:	460b      	mov	r3, r1
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	4403      	add	r3, r0
 80015e6:	3304      	adds	r3, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f103 0210 	add.w	r2, r3, #16
 80015ee:	4b63      	ldr	r3, [pc, #396]	; (800177c <drawInvaders+0x1c4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d377      	bcc.n	80016e6 <drawInvaders+0x12e>
 80015f6:	4860      	ldr	r0, [pc, #384]	; (8001778 <drawInvaders+0x1c0>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	441a      	add	r2, r3
 8001602:	0093      	lsls	r3, r2, #2
 8001604:	461a      	mov	r2, r3
 8001606:	460b      	mov	r3, r1
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	4403      	add	r3, r0
 8001612:	3304      	adds	r3, #4
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b59      	ldr	r3, [pc, #356]	; (800177c <drawInvaders+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d863      	bhi.n	80016e6 <drawInvaders+0x12e>
 800161e:	4856      	ldr	r0, [pc, #344]	; (8001778 <drawInvaders+0x1c0>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	461a      	mov	r2, r3
 8001626:	0052      	lsls	r2, r2, #1
 8001628:	441a      	add	r2, r3
 800162a:	0093      	lsls	r3, r2, #2
 800162c:	461a      	mov	r2, r3
 800162e:	460b      	mov	r3, r1
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	4403      	add	r3, r0
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <drawInvaders+0x1c8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d850      	bhi.n	80016e6 <drawInvaders+0x12e>
 8001644:	484c      	ldr	r0, [pc, #304]	; (8001778 <drawInvaders+0x1c0>)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	0052      	lsls	r2, r2, #1
 800164e:	441a      	add	r2, r3
 8001650:	0093      	lsls	r3, r2, #2
 8001652:	461a      	mov	r2, r3
 8001654:	460b      	mov	r3, r1
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	4403      	add	r3, r0
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f103 0210 	add.w	r2, r3, #16
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <drawInvaders+0x1c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d33b      	bcc.n	80016e6 <drawInvaders+0x12e>
 800166e:	4842      	ldr	r0, [pc, #264]	; (8001778 <drawInvaders+0x1c0>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	461a      	mov	r2, r3
 8001676:	0052      	lsls	r2, r2, #1
 8001678:	441a      	add	r2, r3
 800167a:	0093      	lsls	r3, r2, #2
 800167c:	461a      	mov	r2, r3
 800167e:	460b      	mov	r3, r1
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	4403      	add	r3, r0
 800168a:	3308      	adds	r3, #8
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d029      	beq.n	80016e6 <drawInvaders+0x12e>
			{
				invGrid[i][j].gameState = 0; // if the missile is at the same y level and within the x range, the invader dies
 8001692:	4839      	ldr	r0, [pc, #228]	; (8001778 <drawInvaders+0x1c0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	461a      	mov	r2, r3
 800169a:	0052      	lsls	r2, r2, #1
 800169c:	441a      	add	r2, r3
 800169e:	0093      	lsls	r3, r2, #2
 80016a0:	461a      	mov	r2, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	4403      	add	r3, r0
 80016ae:	3308      	adds	r3, #8
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
				buttonO_pressed = 0;
 80016b4:	4b33      	ldr	r3, [pc, #204]	; (8001784 <drawInvaders+0x1cc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
				score += 10;
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <drawInvaders+0x1d0>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	330a      	adds	r3, #10
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b31      	ldr	r3, [pc, #196]	; (8001788 <drawInvaders+0x1d0>)
 80016c4:	801a      	strh	r2, [r3, #0]

				if(score >= highscore)
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <drawInvaders+0x1d0>)
 80016c8:	881a      	ldrh	r2, [r3, #0]
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <drawInvaders+0x1d4>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d303      	bcc.n	80016da <drawInvaders+0x122>
					highscore = score;
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <drawInvaders+0x1d0>)
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <drawInvaders+0x1d4>)
 80016d8:	801a      	strh	r2, [r3, #0]

				HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) audio3, AUDIOLEN3);
 80016da:	f641 6250 	movw	r2, #7760	; 0x1e50
 80016de:	492c      	ldr	r1, [pc, #176]	; (8001790 <drawInvaders+0x1d8>)
 80016e0:	482c      	ldr	r0, [pc, #176]	; (8001794 <drawInvaders+0x1dc>)
 80016e2:	f001 ff09 	bl	80034f8 <HAL_I2S_Transmit_DMA>
			}

			if((invGrid[i][j].gameState == 1) && (alternate < 20)) // if 0, don't draw the invader
 80016e6:	4824      	ldr	r0, [pc, #144]	; (8001778 <drawInvaders+0x1c0>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	461a      	mov	r2, r3
 80016ee:	0052      	lsls	r2, r2, #1
 80016f0:	441a      	add	r2, r3
 80016f2:	0093      	lsls	r3, r2, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	460b      	mov	r3, r1
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	4403      	add	r3, r0
 8001702:	3308      	adds	r3, #8
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d14a      	bne.n	80017a0 <drawInvaders+0x1e8>
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <drawInvaders+0x1e0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b13      	cmp	r3, #19
 8001710:	dc46      	bgt.n	80017a0 <drawInvaders+0x1e8>
			{
				BitBlitNew(FindSprite(Sprites_Data, INV2), invGrid[i][j].xCoord, invGrid[i][j].yCoord, INV2_W, INV2_H);
 8001712:	2101      	movs	r1, #1
 8001714:	4821      	ldr	r0, [pc, #132]	; (800179c <drawInvaders+0x1e4>)
 8001716:	f7fe ff7d 	bl	8000614 <FindSprite>
 800171a:	4604      	mov	r4, r0
 800171c:	4816      	ldr	r0, [pc, #88]	; (8001778 <drawInvaders+0x1c0>)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	0052      	lsls	r2, r2, #1
 8001726:	441a      	add	r2, r3
 8001728:	0093      	lsls	r3, r2, #2
 800172a:	461a      	mov	r2, r3
 800172c:	460b      	mov	r3, r1
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	4403      	add	r3, r0
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	461d      	mov	r5, r3
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <drawInvaders+0x1c0>)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	461a      	mov	r2, r3
 8001744:	0052      	lsls	r2, r2, #1
 8001746:	441a      	add	r2, r3
 8001748:	0093      	lsls	r3, r2, #2
 800174a:	461a      	mov	r2, r3
 800174c:	460b      	mov	r3, r1
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	4403      	add	r3, r0
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	2310      	movs	r3, #16
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2310      	movs	r3, #16
 8001764:	4629      	mov	r1, r5
 8001766:	4620      	mov	r0, r4
 8001768:	f000 fc68 	bl	800203c <BitBlitNew>
				alternate++;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <drawInvaders+0x1e0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <drawInvaders+0x1e0>)
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e062      	b.n	800183e <drawInvaders+0x286>
 8001778:	2001b1e4 	.word	0x2001b1e4
 800177c:	2001aa3c 	.word	0x2001aa3c
 8001780:	2001b1dc 	.word	0x2001b1dc
 8001784:	2001b310 	.word	0x2001b310
 8001788:	2001aaae 	.word	0x2001aaae
 800178c:	2001aab0 	.word	0x2001aab0
 8001790:	08006c68 	.word	0x08006c68
 8001794:	2001b320 	.word	0x2001b320
 8001798:	2001aabc 	.word	0x2001aabc
 800179c:	2001aad0 	.word	0x2001aad0
			}
			else if((invGrid[i][j].gameState == 1) && (alternate >= 20))
 80017a0:	4853      	ldr	r0, [pc, #332]	; (80018f0 <drawInvaders+0x338>)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	461a      	mov	r2, r3
 80017a8:	0052      	lsls	r2, r2, #1
 80017aa:	441a      	add	r2, r3
 80017ac:	0093      	lsls	r3, r2, #2
 80017ae:	461a      	mov	r2, r3
 80017b0:	460b      	mov	r3, r1
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	4403      	add	r3, r0
 80017bc:	3308      	adds	r3, #8
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d13c      	bne.n	800183e <drawInvaders+0x286>
 80017c4:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <drawInvaders+0x33c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b13      	cmp	r3, #19
 80017ca:	dd38      	ble.n	800183e <drawInvaders+0x286>
			{
				BitBlitNew(FindSprite(Sprites_Data, INV3), invGrid[i][j].xCoord, invGrid[i][j].yCoord, INV3_W, INV3_H);
 80017cc:	2102      	movs	r1, #2
 80017ce:	484a      	ldr	r0, [pc, #296]	; (80018f8 <drawInvaders+0x340>)
 80017d0:	f7fe ff20 	bl	8000614 <FindSprite>
 80017d4:	4604      	mov	r4, r0
 80017d6:	4846      	ldr	r0, [pc, #280]	; (80018f0 <drawInvaders+0x338>)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	461a      	mov	r2, r3
 80017de:	0052      	lsls	r2, r2, #1
 80017e0:	441a      	add	r2, r3
 80017e2:	0093      	lsls	r3, r2, #2
 80017e4:	461a      	mov	r2, r3
 80017e6:	460b      	mov	r3, r1
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	4403      	add	r3, r0
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461d      	mov	r5, r3
 80017f6:	483e      	ldr	r0, [pc, #248]	; (80018f0 <drawInvaders+0x338>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	461a      	mov	r2, r3
 80017fe:	0052      	lsls	r2, r2, #1
 8001800:	441a      	add	r2, r3
 8001802:	0093      	lsls	r3, r2, #2
 8001804:	461a      	mov	r2, r3
 8001806:	460b      	mov	r3, r1
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	4403      	add	r3, r0
 8001812:	3304      	adds	r3, #4
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	2310      	movs	r3, #16
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2310      	movs	r3, #16
 800181e:	4629      	mov	r1, r5
 8001820:	4620      	mov	r0, r4
 8001822:	f000 fc0b 	bl	800203c <BitBlitNew>
				alternate++;
 8001826:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <drawInvaders+0x33c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <drawInvaders+0x33c>)
 800182e:	6013      	str	r3, [r2, #0]
				if(alternate > 40)
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <drawInvaders+0x33c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b28      	cmp	r3, #40	; 0x28
 8001836:	dd02      	ble.n	800183e <drawInvaders+0x286>
					alternate = 0;
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <drawInvaders+0x33c>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
		for(int j = 5; j >= 0; j--)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f6bf aebf 	bge.w	80015ca <drawInvaders+0x12>
	for(int i = 3; i >= 0; i--)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f6bf aeb5 	bge.w	80015c4 <drawInvaders+0xc>
			}

		}
	}

	offsetFunc();
 800185a:	f7ff fc4d 	bl	80010f8 <offsetFunc>
	yoffsetFunc();
 800185e:	f7ff fbfb 	bl	8001058 <yoffsetFunc>

	if((Row[0].xCoord <= 0) && (Row[0].vel == 0)) // we use row 0 to check
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <drawInvaders+0x344>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <drawInvaders+0x2ce>
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <drawInvaders+0x344>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <drawInvaders+0x2ce>
	{
		xPosAdd = -xPosAdd;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <drawInvaders+0x348>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	425b      	negs	r3, r3
 8001878:	4a21      	ldr	r2, [pc, #132]	; (8001900 <drawInvaders+0x348>)
 800187a:	6013      	str	r3, [r2, #0]
		Row[0].vel = 1;
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <drawInvaders+0x344>)
 800187e:	2201      	movs	r2, #1
 8001880:	60da      	str	r2, [r3, #12]
		shiftDown();
 8001882:	f7ff fe4f 	bl	8001524 <shiftDown>
	}

	if((Row[0].xCoord + offset >= 316) && (Row[0].vel == 1)) // initially the offset is the width of the invader grid
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <drawInvaders+0x344>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <drawInvaders+0x34c>)
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	4413      	add	r3, r2
 8001890:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8001894:	d30d      	bcc.n	80018b2 <drawInvaders+0x2fa>
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <drawInvaders+0x344>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d109      	bne.n	80018b2 <drawInvaders+0x2fa>
	{
		xPosAdd = -xPosAdd;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <drawInvaders+0x348>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	425b      	negs	r3, r3
 80018a4:	4a16      	ldr	r2, [pc, #88]	; (8001900 <drawInvaders+0x348>)
 80018a6:	6013      	str	r3, [r2, #0]
		Row[0].vel = 0;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <drawInvaders+0x344>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
		shiftDown();
 80018ae:	f7ff fe39 	bl	8001524 <shiftDown>
	}

	if((Row[0].yCoord + yOffset) >= (200-SHP_H))
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <drawInvaders+0x344>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <drawInvaders+0x350>)
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	2bb7      	cmp	r3, #183	; 0xb7
 80018be:	d910      	bls.n	80018e2 <drawInvaders+0x32a>
	{
		 HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) audio2, AUDIOLEN2);
 80018c0:	f245 125c 	movw	r2, #20828	; 0x515c
 80018c4:	4911      	ldr	r1, [pc, #68]	; (800190c <drawInvaders+0x354>)
 80018c6:	4812      	ldr	r0, [pc, #72]	; (8001910 <drawInvaders+0x358>)
 80018c8:	f001 fe16 	bl	80034f8 <HAL_I2S_Transmit_DMA>
		 lives--;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <drawInvaders+0x35c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <drawInvaders+0x35c>)
 80018d4:	6013      	str	r3, [r2, #0]
		 if(lives > 0)
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <drawInvaders+0x35c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dd04      	ble.n	80018e8 <drawInvaders+0x330>
			 resetGame();
 80018de:	f7fe ffb7 	bl	8000850 <resetGame>
		 else
			 return;
	}

	moveInvaders();
 80018e2:	f7ff fa4b 	bl	8000d7c <moveInvaders>
 80018e6:	e000      	b.n	80018ea <drawInvaders+0x332>
			 return;
 80018e8:	bf00      	nop
}
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bdb0      	pop	{r4, r5, r7, pc}
 80018f0:	2001b1e4 	.word	0x2001b1e4
 80018f4:	2001aabc 	.word	0x2001aabc
 80018f8:	2001aad0 	.word	0x2001aad0
 80018fc:	2001b098 	.word	0x2001b098
 8001900:	2001aa48 	.word	0x2001aa48
 8001904:	2001aa50 	.word	0x2001aa50
 8001908:	2001aa64 	.word	0x2001aa64
 800190c:	0800a908 	.word	0x0800a908
 8001910:	2001b320 	.word	0x2001b320
 8001914:	2001aa60 	.word	0x2001aa60

08001918 <screenClear>:

void screenClear() // using DMA to clear the whole screen
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
	clearDone = 0;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <screenClear+0x70>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]

	uint32_t* ptrscreen = (uint32_t*)0x20021900;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <screenClear+0x74>)
 8001926:	60fb      	str	r3, [r7, #12]
	*ptrscreen = 0;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, 0x20020000, 0x20020004, 15999);
 800192e:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <screenClear+0x78>)
 8001934:	4917      	ldr	r1, [pc, #92]	; (8001994 <screenClear+0x7c>)
 8001936:	4818      	ldr	r0, [pc, #96]	; (8001998 <screenClear+0x80>)
 8001938:	f001 f844 	bl	80029c4 <HAL_DMA_Start_IT>

	while(!clearDone);
 800193c:	bf00      	nop
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <screenClear+0x70>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0fa      	beq.n	800193e <screenClear+0x26>

	uint32_t* titleptr = (uint32_t*)title;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <screenClear+0x84>)
 800194a:	60bb      	str	r3, [r7, #8]

	ptrscreen = (uint32_t*)0x20020000;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <screenClear+0x7c>)
 800194e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1600; i++)
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	e00a      	b.n	800196c <screenClear+0x54>
	{
			*ptrscreen++ = *titleptr++;
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	1d13      	adds	r3, r2, #4
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1d19      	adds	r1, r3, #4
 8001960:	60f9      	str	r1, [r7, #12]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 1600; i++)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001972:	dbf0      	blt.n	8001956 <screenClear+0x3e>
	}
	displayint(highscore, (uint32_t*)(0x200204E0));
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <screenClear+0x88>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	490a      	ldr	r1, [pc, #40]	; (80019a4 <screenClear+0x8c>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f8b0 	bl	8000ae0 <displayint>
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2001b304 	.word	0x2001b304
 800198c:	20021900 	.word	0x20021900
 8001990:	20020004 	.word	0x20020004
 8001994:	20020000 	.word	0x20020000
 8001998:	2001b0d8 	.word	0x2001b0d8
 800199c:	08005368 	.word	0x08005368
 80019a0:	2001aab0 	.word	0x2001aab0
 80019a4:	200204e0 	.word	0x200204e0

080019a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  if(GPIO_Pin == GPIO_PIN_9)
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b8:	d10a      	bne.n	80019d0 <HAL_GPIO_EXTI_Callback+0x28>
   {
 	  if(buttonD_pressed == 0)
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0x22>
 	  {
 		 buttonD_pressed = 1;
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_EXTI_Callback+0x28>
 	  }
 	  else
 	  {
 		 buttonD_pressed = 0;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
 	  }

   }
   if(GPIO_Pin == GPIO_PIN_10)
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d6:	d10a      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0x46>
   {
 	  if(buttonA_pressed == 0)
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x70>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <HAL_GPIO_EXTI_Callback+0x40>
 	  	  {
 	  		 buttonA_pressed = 1;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x70>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_EXTI_Callback+0x46>
 	  	  }
 	  	  else
 	  	  {
 	  		 buttonA_pressed = 0;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x70>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 	  	  }
   }
   if(GPIO_Pin == GPIO_PIN_1)
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d109      	bne.n	8001a08 <HAL_GPIO_EXTI_Callback+0x60>
   {
	   if(buttonO_pressed == 0)
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x74>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_GPIO_EXTI_Callback+0x60>
	   {
		   buttonO_pressed = 1;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x74>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
		   playSound1 = 1;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x78>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
	   }
   }
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	2001b1e0 	.word	0x2001b1e0
 8001a18:	2001b311 	.word	0x2001b311
 8001a1c:	2001b310 	.word	0x2001b310
 8001a20:	2001aaac 	.word	0x2001aaac

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	LDRSprites(Sprites_Data); // store all sprites in memory
 8001a2a:	4872      	ldr	r0, [pc, #456]	; (8001bf4 <main+0x1d0>)
 8001a2c:	f7fe fdbc 	bl	80005a8 <LDRSprites>

	yPosloop = 20; // start of the invader grid
 8001a30:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <main+0x1d4>)
 8001a32:	2214      	movs	r2, #20
 8001a34:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 4; i++) // initialising the grid of invaders
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e04e      	b.n	8001ada <main+0xb6>
	{
		xPosloop = 0; // start of invader grid
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <main+0x1d8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 6; j++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	e03d      	b.n	8001ac4 <main+0xa0>
		{
			invGrid[i][j].xCoord = xPosloop;
 8001a48:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <main+0x1d8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	486c      	ldr	r0, [pc, #432]	; (8001c00 <main+0x1dc>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	0052      	lsls	r2, r2, #1
 8001a58:	441a      	add	r2, r3
 8001a5a:	0093      	lsls	r3, r2, #2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	460b      	mov	r3, r1
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	4403      	add	r3, r0
 8001a6a:	601c      	str	r4, [r3, #0]
			invGrid[i][j].yCoord = yPosloop;
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <main+0x1d4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	461c      	mov	r4, r3
 8001a72:	4863      	ldr	r0, [pc, #396]	; (8001c00 <main+0x1dc>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	0052      	lsls	r2, r2, #1
 8001a7c:	441a      	add	r2, r3
 8001a7e:	0093      	lsls	r3, r2, #2
 8001a80:	461a      	mov	r2, r3
 8001a82:	460b      	mov	r3, r1
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4403      	add	r3, r0
 8001a8e:	3304      	adds	r3, #4
 8001a90:	601c      	str	r4, [r3, #0]
			invGrid[i][j].gameState = 1;
 8001a92:	485b      	ldr	r0, [pc, #364]	; (8001c00 <main+0x1dc>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	0052      	lsls	r2, r2, #1
 8001a9c:	441a      	add	r2, r3
 8001a9e:	0093      	lsls	r3, r2, #2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	4403      	add	r3, r0
 8001aae:	3308      	adds	r3, #8
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

			xPosloop += (INV2_W+8); // wont let me do INV2_W*1.5 for some reason, same for INV2_H
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <main+0x1d8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3318      	adds	r3, #24
 8001aba:	4a50      	ldr	r2, [pc, #320]	; (8001bfc <main+0x1d8>)
 8001abc:	6013      	str	r3, [r2, #0]
		for(int j = 0; j < 6; j++)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	ddbe      	ble.n	8001a48 <main+0x24>
		}

		yPosloop += (INV2_H+8);
 8001aca:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <main+0x1d4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3318      	adds	r3, #24
 8001ad0:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <main+0x1d4>)
 8001ad2:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4; i++) // initialising the grid of invaders
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	ddad      	ble.n	8001a3c <main+0x18>
	}

	for(int i = 0; i < 4; i++) // initially setting up the row array
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	e020      	b.n	8001b28 <main+0x104>
	{
		Row[i].xCoord = invGrid[0][0].xCoord;
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <main+0x1dc>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4946      	ldr	r1, [pc, #280]	; (8001c04 <main+0x1e0>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	601a      	str	r2, [r3, #0]
		Row[i].xCoord2 = invGrid[0][5].xCoord;
 8001af4:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <main+0x1dc>)
 8001af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af8:	4942      	ldr	r1, [pc, #264]	; (8001c04 <main+0x1e0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	440b      	add	r3, r1
 8001b00:	3304      	adds	r3, #4
 8001b02:	601a      	str	r2, [r3, #0]
		Row[i].vel = 1; // positive velocity
 8001b04:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <main+0x1e0>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
		Row[i].yCoord = invGrid[0][0].yCoord;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <main+0x1dc>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	493b      	ldr	r1, [pc, #236]	; (8001c04 <main+0x1e0>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3308      	adds	r3, #8
 8001b20:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) // initially setting up the row array
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3301      	adds	r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	dddb      	ble.n	8001ae6 <main+0xc2>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2e:	f000 fcf5 	bl	800251c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b32:	f000 f87b 	bl	8001c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b36:	f000 f9e9 	bl	8001f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b3a:	f000 f97b 	bl	8001e34 <MX_DMA_Init>
  MX_TIM3_Init();
 8001b3e:	f000 f92b 	bl	8001d98 <MX_TIM3_Init>
  MX_I2S3_Init();
 8001b42:	f000 f8fb 	bl	8001d3c <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8001b46:	4830      	ldr	r0, [pc, #192]	; (8001c08 <main+0x1e4>)
 8001b48:	f002 febd 	bl	80048c6 <HAL_TIM_Base_Start_IT>

  BitBlitTitleScreen();
 8001b4c:	f000 fab4 	bl	80020b8 <BitBlitTitleScreen>

  HAL_Delay(400);
 8001b50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b54:	f000 fd54 	bl	8002600 <HAL_Delay>

  BitBlitNew(FindSprite(Sprites_Data, SHP), xPos, yPos, SHP_W, SHP_H);
 8001b58:	2103      	movs	r1, #3
 8001b5a:	4826      	ldr	r0, [pc, #152]	; (8001bf4 <main+0x1d0>)
 8001b5c:	f7fe fd5a 	bl	8000614 <FindSprite>
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <main+0x1e8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <main+0x1ec>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2316      	movs	r3, #22
 8001b72:	f000 fa63 	bl	800203c <BitBlitNew>

  drawInvaders();
 8001b76:	f7ff fd1f 	bl	80015b8 <drawInvaders>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((lives == 0) || ((isEmptyCol[0] == 1) && (isEmptyCol[1] == 1) && (isEmptyCol[2] == 1) && (isEmptyCol[3] == 1) && (isEmptyCol[4] == 1) && (isEmptyCol[5] == 1)))
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <main+0x1f0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d017      	beq.n	8001bb2 <main+0x18e>
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <main+0x1f4>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d11c      	bne.n	8001bc4 <main+0x1a0>
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <main+0x1f4>)
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d118      	bne.n	8001bc4 <main+0x1a0>
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <main+0x1f4>)
 8001b94:	789b      	ldrb	r3, [r3, #2]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d114      	bne.n	8001bc4 <main+0x1a0>
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <main+0x1f4>)
 8001b9c:	78db      	ldrb	r3, [r3, #3]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d110      	bne.n	8001bc4 <main+0x1a0>
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <main+0x1f4>)
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10c      	bne.n	8001bc4 <main+0x1a0>
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <main+0x1f4>)
 8001bac:	795b      	ldrb	r3, [r3, #5]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <main+0x1a0>
	  {
		  screenClear();
 8001bb2:	f7ff feb1 	bl	8001918 <screenClear>
		  BitBlitEndingScreen(); // end the game
 8001bb6:	f000 faab 	bl	8002110 <BitBlitEndingScreen>
		  HAL_Delay(1000);
 8001bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bbe:	f000 fd1f 	bl	8002600 <HAL_Delay>
 8001bc2:	e016      	b.n	8001bf2 <main+0x1ce>
	  }
	  else
	  {
		  if(refresh)
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <main+0x1f8>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <main+0x1b4>
		  {
			  updateScreen();
 8001bce:	f7fe fd5b 	bl	8000688 <updateScreen>
			  refresh = 0;
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <main+0x1f8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
		  }

		  if(playSound1) // ship firing
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <main+0x1fc>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0cc      	beq.n	8001b7a <main+0x156>
		  {
			  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) audio1, AUDIOLEN1);
 8001be0:	f44f 5246 	mov.w	r2, #12672	; 0x3180
 8001be4:	490f      	ldr	r1, [pc, #60]	; (8001c24 <main+0x200>)
 8001be6:	4810      	ldr	r0, [pc, #64]	; (8001c28 <main+0x204>)
 8001be8:	f001 fc86 	bl	80034f8 <HAL_I2S_Transmit_DMA>
			  playSound1 = 0;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <main+0x1fc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
	  if ((lives == 0) || ((isEmptyCol[0] == 1) && (isEmptyCol[1] == 1) && (isEmptyCol[2] == 1) && (isEmptyCol[3] == 1) && (isEmptyCol[4] == 1) && (isEmptyCol[5] == 1)))
 8001bf2:	e7c2      	b.n	8001b7a <main+0x156>
 8001bf4:	2001aad0 	.word	0x2001aad0
 8001bf8:	2001b314 	.word	0x2001b314
 8001bfc:	2001b30c 	.word	0x2001b30c
 8001c00:	2001b1e4 	.word	0x2001b1e4
 8001c04:	2001b098 	.word	0x2001b098
 8001c08:	2001b138 	.word	0x2001b138
 8001c0c:	2001aa34 	.word	0x2001aa34
 8001c10:	2001aa38 	.word	0x2001aa38
 8001c14:	2001aa60 	.word	0x2001aa60
 8001c18:	2001aab4 	.word	0x2001aab4
 8001c1c:	2001aa94 	.word	0x2001aa94
 8001c20:	2001aaac 	.word	0x2001aaac
 8001c24:	08014bc0 	.word	0x08014bc0
 8001c28:	2001b320 	.word	0x2001b320

08001c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b09a      	sub	sp, #104	; 0x68
 8001c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c36:	2230      	movs	r2, #48	; 0x30
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fa18 	bl	8005070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	615a      	str	r2, [r3, #20]

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8001c62:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <SystemClock_Config+0x108>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c6a:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <SystemClock_Config+0x108>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <SystemClock_Config+0x108>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a2f      	ldr	r2, [pc, #188]	; (8001d34 <SystemClock_Config+0x108>)
 8001c78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c7c:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <SystemClock_Config+0x108>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a2b      	ldr	r2, [pc, #172]	; (8001d34 <SystemClock_Config+0x108>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <SystemClock_Config+0x108>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <SystemClock_Config+0x10c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <SystemClock_Config+0x10c>)
 8001ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <SystemClock_Config+0x10c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 f878 	bl	8003dc4 <HAL_RCC_OscConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001cda:	f000 fa45 	bl	8002168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cde:	230f      	movs	r3, #15
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fad3 	bl	80042a4 <HAL_RCC_ClockConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001d04:	f000 fa30 	bl	8002168 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001d10:	2310      	movs	r3, #16
 8001d12:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 fc59 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001d28:	f000 fa1e 	bl	8002168 <Error_Handler>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3768      	adds	r7, #104	; 0x68
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000

08001d3c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d42:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <MX_I2S3_Init+0x58>)
 8001d44:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d66:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_I2S3_Init+0x54>)
 8001d7c:	f001 fa7c 	bl	8003278 <HAL_I2S_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001d86:	f000 f9ef 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2001b320 	.word	0x2001b320
 8001d94:	40003c00 	.word	0x40003c00

08001d98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	463b      	mov	r3, r7
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001db6:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <MX_TIM3_Init+0x98>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001dbc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001dc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000 ;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001dca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ddc:	4813      	ldr	r0, [pc, #76]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001dde:	f002 fd47 	bl	8004870 <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001de8:	f000 f9be 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4619      	mov	r1, r3
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001dfa:	f002 fe90 	bl	8004b1e <HAL_TIM_ConfigClockSource>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e04:	f000 f9b0 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_TIM3_Init+0x94>)
 8001e16:	f003 f885 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e20:	f000 f9a2 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2001b138 	.word	0x2001b138
 8001e30:	40000400 	.word	0x40000400

08001e34 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void) 
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <MX_DMA_Init+0xcc>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <MX_DMA_Init+0xcc>)
 8001e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <MX_DMA_Init+0xcc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <MX_DMA_Init+0xcc>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <MX_DMA_Init+0xcc>)
 8001e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <MX_DMA_Init+0xcc>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <MX_DMA_Init+0xd4>)
 8001e76:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e92:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e9a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea2:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001eb8:	2203      	movs	r2, #3
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001ec8:	480e      	ldr	r0, [pc, #56]	; (8001f04 <MX_DMA_Init+0xd0>)
 8001eca:	f000 fccd 	bl	8002868 <HAL_DMA_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 8001ed4:	f000 f948 	bl	8002168 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	2010      	movs	r0, #16
 8001ede:	f000 fc8c 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ee2:	2010      	movs	r0, #16
 8001ee4:	f000 fca5 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	2038      	movs	r0, #56	; 0x38
 8001eee:	f000 fc84 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ef2:	2038      	movs	r0, #56	; 0x38
 8001ef4:	f000 fc9d 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	2001b0d8 	.word	0x2001b0d8
 8001f08:	40026410 	.word	0x40026410

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a37      	ldr	r2, [pc, #220]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b35      	ldr	r3, [pc, #212]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a30      	ldr	r2, [pc, #192]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a29      	ldr	r2, [pc, #164]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <MX_GPIO_Init+0x118>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f92:	2302      	movs	r3, #2
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <MX_GPIO_Init+0x11c>)
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4821      	ldr	r0, [pc, #132]	; (800202c <MX_GPIO_Init+0x120>)
 8001fa6:	f000 ffcd 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001faa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <MX_GPIO_Init+0x124>)
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	481d      	ldr	r0, [pc, #116]	; (8002034 <MX_GPIO_Init+0x128>)
 8001fc0:	f000 ffc0 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <MX_GPIO_Init+0x11c>)
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4818      	ldr	r0, [pc, #96]	; (8002038 <MX_GPIO_Init+0x12c>)
 8001fd8:	f000 ffb4 	bl	8002f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2007      	movs	r0, #7
 8001fe2:	f000 fc0a 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fe6:	2007      	movs	r0, #7
 8001fe8:	f000 fc23 	bl	8002832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f000 fc02 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f000 fc1b 	bl	8002832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2017      	movs	r0, #23
 8002002:	f000 fbfa 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002006:	2017      	movs	r0, #23
 8002008:	f000 fc13 	bl	8002832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2028      	movs	r0, #40	; 0x28
 8002012:	f000 fbf2 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002016:	2028      	movs	r0, #40	; 0x28
 8002018:	f000 fc0b 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	10110000 	.word	0x10110000
 800202c:	40020000 	.word	0x40020000
 8002030:	10310000 	.word	0x10310000
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40020400 	.word	0x40020400

0800203c <BitBlitNew>:

/* USER CODE BEGIN 4 */

void BitBlitNew(unsigned char* ptr_sprite, int x, int y, int sprite_w, int sprite_h)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
	uint8_t* ptrscreen = (uint8_t*)(0x20020000 + y*320+x);
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	019b      	lsls	r3, r3, #6
 8002054:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002058:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	4413      	add	r3, r2
 8002060:	61fb      	str	r3, [r7, #28]
	uint8_t* ptrsrc = ptr_sprite;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < sprite_h; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e01b      	b.n	80020a4 <BitBlitNew+0x68>
	{
		for(int j = 0; j < sprite_w; j++)
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	e00a      	b.n	8002088 <BitBlitNew+0x4c>
		{
			*ptrscreen++ = *ptrsrc++;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	1c53      	adds	r3, r2, #1
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	1c59      	adds	r1, r3, #1
 800207c:	61f9      	str	r1, [r7, #28]
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < sprite_w; j++)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	3301      	adds	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf0      	blt.n	8002072 <BitBlitNew+0x36>
		}
		ptrscreen += (320-sprite_w);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002096:	461a      	mov	r2, r3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	4413      	add	r3, r2
 800209c:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < sprite_h; i++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbdf      	blt.n	800206c <BitBlitNew+0x30>
	}
}
 80020ac:	bf00      	nop
 80020ae:	3724      	adds	r7, #36	; 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <BitBlitTitleScreen>:

void BitBlitTitleScreen()
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
	uint8_t* ptrscreen = (uint8_t*)(0x20020000);
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <BitBlitTitleScreen+0x50>)
 80020c0:	60fb      	str	r3, [r7, #12]
	uint8_t* ptrsrc = openingScreen;
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <BitBlitTitleScreen+0x54>)
 80020c4:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < 200; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e014      	b.n	80020f6 <BitBlitTitleScreen+0x3e>
	{
		for(int j = 0; j < 320; j++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	e00a      	b.n	80020e8 <BitBlitTitleScreen+0x30>
		{
			*ptrscreen++ = *ptrsrc++;
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	1c53      	adds	r3, r2, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1c59      	adds	r1, r3, #1
 80020dc:	60f9      	str	r1, [r7, #12]
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 320; j++)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020ee:	dbf0      	blt.n	80020d2 <BitBlitTitleScreen+0x1a>
	for(int i = 0; i < 200; i++)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2bc7      	cmp	r3, #199	; 0xc7
 80020fa:	dde7      	ble.n	80020cc <BitBlitTitleScreen+0x14>
		}
		ptrscreen += (320-320);
	}
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20020000 	.word	0x20020000
 800210c:	20000134 	.word	0x20000134

08002110 <BitBlitEndingScreen>:

void BitBlitEndingScreen()// size is 320x140
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
	uint8_t* ptrscreen = (uint8_t*)(0x20020000 + 30*320);
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <BitBlitEndingScreen+0x50>)
 8002118:	60fb      	str	r3, [r7, #12]
	uint8_t* ptrsrc = gameOver;
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <BitBlitEndingScreen+0x54>)
 800211c:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < 140; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	e014      	b.n	800214e <BitBlitEndingScreen+0x3e>
	{
		for(int j = 0; j < 320; j++)
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	e00a      	b.n	8002140 <BitBlitEndingScreen+0x30>
		{
			*ptrscreen++ = *ptrsrc++;
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	1c53      	adds	r3, r2, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1c59      	adds	r1, r3, #1
 8002134:	60f9      	str	r1, [r7, #12]
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 320; j++)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002146:	dbf0      	blt.n	800212a <BitBlitEndingScreen+0x1a>
	for(int i = 0; i < 140; i++)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3301      	adds	r3, #1
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b8b      	cmp	r3, #139	; 0x8b
 8002152:	dde7      	ble.n	8002124 <BitBlitEndingScreen+0x14>
		}
		ptrscreen += (320-320);
	}
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20022580 	.word	0x20022580
 8002164:	2000fb34 	.word	0x2000fb34

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <HAL_MspInit+0x4c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_MspInit+0x4c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_MspInit+0x4c>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a40      	ldr	r2, [pc, #256]	; (80022e8 <HAL_I2S_MspInit+0x120>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d179      	bne.n	80022de <HAL_I2S_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_I2S_MspInit+0x124>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a3e      	ldr	r2, [pc, #248]	; (80022ec <HAL_I2S_MspInit+0x124>)
 80021f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <HAL_I2S_MspInit+0x124>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_I2S_MspInit+0x124>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a37      	ldr	r2, [pc, #220]	; (80022ec <HAL_I2S_MspInit+0x124>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_I2S_MspInit+0x124>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_I2S_MspInit+0x124>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a30      	ldr	r2, [pc, #192]	; (80022ec <HAL_I2S_MspInit+0x124>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_I2S_MspInit+0x124>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration    
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800223e:	2310      	movs	r3, #16
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800224e:	2306      	movs	r3, #6
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4825      	ldr	r0, [pc, #148]	; (80022f0 <HAL_I2S_MspInit+0x128>)
 800225a:	f000 fe73 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800225e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002270:	2306      	movs	r3, #6
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	481e      	ldr	r0, [pc, #120]	; (80022f4 <HAL_I2S_MspInit+0x12c>)
 800227c:	f000 fe62 	bl	8002f44 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 8002282:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_I2S_MspInit+0x134>)
 8002284:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 800229a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ae:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80022c2:	480d      	ldr	r0, [pc, #52]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022c4:	f000 fad0 	bl	8002868 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2S_MspInit+0x10a>
    {
      Error_Handler();
 80022ce:	f7ff ff4b 	bl	8002168 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_I2S_MspInit+0x130>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40003c00 	.word	0x40003c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020800 	.word	0x40020800
 80022f8:	2001b178 	.word	0x2001b178
 80022fc:	40026088 	.word	0x40026088

08002300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_TIM_Base_MspInit+0x94>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d133      	bne.n	800238a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_TIM_Base_MspInit+0x98>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_TIM_Base_MspInit+0x98>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_TIM_Base_MspInit+0x98>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_TIM_Base_MspInit+0x98>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_TIM_Base_MspInit+0x98>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_TIM_Base_MspInit+0x98>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800236a:	2302      	movs	r3, #2
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4809      	ldr	r0, [pc, #36]	; (800239c <HAL_TIM_Base_MspInit+0x9c>)
 8002376:	f000 fde5 	bl	8002f44 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	201d      	movs	r0, #29
 8002380:	f000 fa3b 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002384:	201d      	movs	r0, #29
 8002386:	f000 fa54 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40000400 	.word	0x40000400
 8002398:	40023800 	.word	0x40023800
 800239c:	40020800 	.word	0x40020800

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <MemManage_Handler+0x4>

080023ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f4:	f000 f8e4 	bl	80025c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002400:	2002      	movs	r0, #2
 8002402:	f000 ff21 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  refresh = 1;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <EXTI4_IRQHandler+0x14>)
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002416:	2010      	movs	r0, #16
 8002418:	f000 ff16 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2001aa94 	.word	0x2001aa94

08002424 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <DMA1_Stream5_IRQHandler+0x10>)
 800242a:	f000 fb23 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2001b178 	.word	0x2001b178

08002438 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800243c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002440:	f000 ff02 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}

08002448 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	invShoot = 1;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <TIM3_IRQHandler+0x14>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <TIM3_IRQHandler+0x18>)
 8002454:	f002 fa5b 	bl	800490e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2001aaa4 	.word	0x2001aaa4
 8002460:	2001b138 	.word	0x2001b138

08002464 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002468:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800246c:	f000 feec 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  if(hdma_memtomem_dma2_stream0.Instance->NDTR == 0)
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <DMA2_Stream0_IRQHandler+0x20>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <DMA2_Stream0_IRQHandler+0x14>
	  clearDone = 1;
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <DMA2_Stream0_IRQHandler+0x24>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA2_Stream0_IRQHandler+0x20>)
 800248a:	f000 faf3 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2001b0d8 	.word	0x2001b0d8
 8002498:	2001b304 	.word	0x2001b304

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <SystemInit+0x28>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <SystemInit+0x28>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SystemInit+0x28>)
 80024b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b6:	609a      	str	r2, [r3, #8]
#endif
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ce:	e003      	b.n	80024d8 <LoopCopyDataInit>

080024d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024d6:	3104      	adds	r1, #4

080024d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024e0:	d3f6      	bcc.n	80024d0 <CopyDataInit>
  ldr  r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024e4:	e002      	b.n	80024ec <LoopFillZerobss>

080024e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024e8:	f842 3b04 	str.w	r3, [r2], #4

080024ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024f0:	d3f9      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024f2:	f7ff ffd3 	bl	800249c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f002 fd97 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7ff fa93 	bl	8001a24 <main>
  bx  lr    
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002500:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002504:	0801aee8 	.word	0x0801aee8
  ldr  r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800250c:	2001aa78 	.word	0x2001aa78
  ldr  r2, =_sbss
 8002510:	2001aa78 	.word	0x2001aa78
  ldr  r3, = _ebss
 8002514:	2001b36c 	.word	0x2001b36c

08002518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC_IRQHandler>
	...

0800251c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <HAL_Init+0x40>)
 8002526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_Init+0x40>)
 8002532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_Init+0x40>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f000 f94d 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f808 	bl	8002560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002550:	f7ff fe12 	bl	8002178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x54>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x58>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	fbb3 f3f1 	udiv	r3, r3, r1
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f965 	bl	800284e <HAL_SYSTICK_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e00e      	b.n	80025ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d80a      	bhi.n	80025aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002594:	2200      	movs	r2, #0
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f000 f92d 	bl	80027fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_InitTick+0x5c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2001aa6c 	.word	0x2001aa6c
 80025b8:	2001aa74 	.word	0x2001aa74
 80025bc:	2001aa70 	.word	0x2001aa70

080025c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x20>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_IncTick+0x24>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_IncTick+0x24>)
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	2001aa74 	.word	0x2001aa74
 80025e4:	2001b368 	.word	0x2001b368

080025e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_GetTick+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2001b368 	.word	0x2001b368

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff ffee 	bl	80025e8 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d005      	beq.n	8002626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_Delay+0x40>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002626:	bf00      	nop
 8002628:	f7ff ffde 	bl	80025e8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8f7      	bhi.n	8002628 <HAL_Delay+0x28>
  {
  }
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2001aa74 	.word	0x2001aa74

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff29 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff3e 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff31 	bl	80026a8 <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffa2 	bl	80027a0 <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff feb8 	bl	80025e8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e099      	b.n	80029b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a4:	e00f      	b.n	80028c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a6:	f7ff fe9f 	bl	80025e8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d908      	bls.n	80028c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e078      	b.n	80029b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e8      	bne.n	80028a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_DMA_Init+0x158>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4313      	orrs	r3, r2
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0307 	bic.w	r3, r3, #7
 8002946:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b04      	cmp	r3, #4
 8002958:	d117      	bne.n	800298a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fa6f 	bl	8002e50 <DMA_CheckFifoParam>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002986:	2301      	movs	r3, #1
 8002988:	e016      	b.n	80029b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa26 	bl	8002de4 <DMA_CalcBaseAndBitshift>
 8002998:	4603      	mov	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	223f      	movs	r2, #63	; 0x3f
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	f010803f 	.word	0xf010803f

080029c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_DMA_Start_IT+0x26>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e040      	b.n	8002a6c <HAL_DMA_Start_IT+0xa8>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d12f      	bne.n	8002a5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f9b8 	bl	8002d88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	223f      	movs	r2, #63	; 0x3f
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0216 	orr.w	r2, r2, #22
 8002a32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0208 	orr.w	r2, r2, #8
 8002a4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e005      	b.n	8002a6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_DMA_IRQHandler+0x258>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a92      	ldr	r2, [pc, #584]	; (8002cd0 <HAL_DMA_IRQHandler+0x25c>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2208      	movs	r2, #8
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2201      	movs	r2, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d012      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2204      	movs	r2, #4
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0204 	orr.w	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2210      	movs	r2, #16
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d043      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03c      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	2210      	movs	r2, #16
 8002b70:	409a      	lsls	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d018      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d024      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	e01f      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01b      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e016      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0208 	bic.w	r2, r2, #8
 8002bd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2220      	movs	r2, #32
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 808e 	beq.w	8002d12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8086 	beq.w	8002d12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d136      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0216 	bic.w	r2, r2, #22
 8002c2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x1da>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0208 	bic.w	r2, r2, #8
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	223f      	movs	r2, #63	; 0x3f
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07d      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
        }
        return;
 8002c8a:	e078      	b.n	8002d7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01c      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d030      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e02b      	b.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
 8002cca:	e022      	b.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
 8002ccc:	2001aa6c 	.word	0x2001aa6c
 8002cd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0210 	bic.w	r2, r2, #16
 8002cf0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d032      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d022      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2205      	movs	r2, #5
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d307      	bcc.n	8002d5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f2      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x2ca>
 8002d58:	e000      	b.n	8002d5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d5a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
 8002d7c:	e000      	b.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d7e:	bf00      	nop
    }
  }
}
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop

08002d88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d108      	bne.n	8002dc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dc6:	e007      	b.n	8002dd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3b10      	subs	r3, #16
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <DMA_CalcBaseAndBitshift+0x64>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <DMA_CalcBaseAndBitshift+0x68>)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d909      	bls.n	8002e26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	1d1a      	adds	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
 8002e24:	e007      	b.n	8002e36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	aaaaaaab 	.word	0xaaaaaaab
 8002e4c:	0801aed0 	.word	0x0801aed0

08002e50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11f      	bne.n	8002eaa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d855      	bhi.n	8002f1c <DMA_CheckFifoParam+0xcc>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <DMA_CheckFifoParam+0x28>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e9b 	.word	0x08002e9b
 8002e80:	08002e89 	.word	0x08002e89
 8002e84:	08002f1d 	.word	0x08002f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d045      	beq.n	8002f20 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e98:	e042      	b.n	8002f20 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea2:	d13f      	bne.n	8002f24 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea8:	e03c      	b.n	8002f24 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb2:	d121      	bne.n	8002ef8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d836      	bhi.n	8002f28 <DMA_CheckFifoParam+0xd8>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <DMA_CheckFifoParam+0x70>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ed7 	.word	0x08002ed7
 8002ec8:	08002ed1 	.word	0x08002ed1
 8002ecc:	08002ee9 	.word	0x08002ee9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	e02f      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d024      	beq.n	8002f2c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee6:	e021      	b.n	8002f2c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef0:	d11e      	bne.n	8002f30 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ef6:	e01b      	b.n	8002f30 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d902      	bls.n	8002f04 <DMA_CheckFifoParam+0xb4>
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d003      	beq.n	8002f0a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f02:	e018      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e015      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1a:	e00b      	b.n	8002f34 <DMA_CheckFifoParam+0xe4>
      break;
 8002f1c:	bf00      	nop
 8002f1e:	e00a      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;
 8002f20:	bf00      	nop
 8002f22:	e008      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;
 8002f24:	bf00      	nop
 8002f26:	e006      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e004      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e002      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;
 8002f34:	bf00      	nop
    }
  } 
  
  return status; 
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e159      	b.n	8003214 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f040 8148 	bne.w	800320e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d00b      	beq.n	8002f9e <HAL_GPIO_Init+0x5a>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d007      	beq.n	8002f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f92:	2b11      	cmp	r3, #17
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b12      	cmp	r3, #18
 8002f9c:	d130      	bne.n	8003000 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 0201 	and.w	r2, r3, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0xfc>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b12      	cmp	r3, #18
 800303e:	d123      	bne.n	8003088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	220f      	movs	r2, #15
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a2 	beq.w	800320e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <HAL_GPIO_Init+0x2e4>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a55      	ldr	r2, [pc, #340]	; (8003228 <HAL_GPIO_Init+0x2e4>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_GPIO_Init+0x2e4>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e6:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a48      	ldr	r2, [pc, #288]	; (8003230 <HAL_GPIO_Init+0x2ec>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d019      	beq.n	8003146 <HAL_GPIO_Init+0x202>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a47      	ldr	r2, [pc, #284]	; (8003234 <HAL_GPIO_Init+0x2f0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_GPIO_Init+0x1fe>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a46      	ldr	r2, [pc, #280]	; (8003238 <HAL_GPIO_Init+0x2f4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00d      	beq.n	800313e <HAL_GPIO_Init+0x1fa>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a45      	ldr	r2, [pc, #276]	; (800323c <HAL_GPIO_Init+0x2f8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <HAL_GPIO_Init+0x1f6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a44      	ldr	r2, [pc, #272]	; (8003240 <HAL_GPIO_Init+0x2fc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_GPIO_Init+0x1f2>
 8003132:	2304      	movs	r3, #4
 8003134:	e008      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003136:	2307      	movs	r3, #7
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x204>
 800313a:	2303      	movs	r3, #3
 800313c:	e004      	b.n	8003148 <HAL_GPIO_Init+0x204>
 800313e:	2302      	movs	r3, #2
 8003140:	e002      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003146:	2300      	movs	r3, #0
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f002 0203 	and.w	r2, r2, #3
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	4093      	lsls	r3, r2
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003158:	4934      	ldr	r1, [pc, #208]	; (800322c <HAL_GPIO_Init+0x2e8>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003166:	4b37      	ldr	r3, [pc, #220]	; (8003244 <HAL_GPIO_Init+0x300>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800318a:	4a2e      	ldr	r2, [pc, #184]	; (8003244 <HAL_GPIO_Init+0x300>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003190:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <HAL_GPIO_Init+0x300>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031de:	4a19      	ldr	r2, [pc, #100]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_GPIO_Init+0x300>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003208:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_GPIO_Init+0x300>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3301      	adds	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	f67f aea2 	bls.w	8002f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800321c:	bf00      	nop
 800321e:	3724      	adds	r7, #36	; 0x24
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40023800 	.word	0x40023800
 800322c:	40013800 	.word	0x40013800
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	40020800 	.word	0x40020800
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021000 	.word	0x40021000
 8003244:	40013c00 	.word	0x40013c00

08003248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fb9e 	bl	80019a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e128      	b.n	80034dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a90      	ldr	r2, [pc, #576]	; (80034e4 <HAL_I2S_Init+0x26c>)
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fe ff8f 	bl	80021c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032c0:	f023 030f 	bic.w	r3, r3, #15
 80032c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2202      	movs	r2, #2
 80032cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d060      	beq.n	8003398 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032de:	2310      	movs	r3, #16
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e001      	b.n	80032e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d802      	bhi.n	80032f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f001 fa5c 	bl	80047b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80032fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003306:	d125      	bne.n	8003354 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	fbb2 f2f3 	udiv	r2, r2, r3
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	461a      	mov	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	3305      	adds	r3, #5
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	e01f      	b.n	8003372 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	3305      	adds	r3, #5
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e00e      	b.n	8003372 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fbb2 f2f3 	udiv	r2, r2, r3
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	3305      	adds	r3, #5
 8003370:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4a5c      	ldr	r2, [pc, #368]	; (80034e8 <HAL_I2S_Init+0x270>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	08db      	lsrs	r3, r3, #3
 800337c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	e003      	b.n	80033a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003398:	2302      	movs	r3, #2
 800339a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d902      	bls.n	80033ac <HAL_I2S_Init+0x134>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2bff      	cmp	r3, #255	; 0xff
 80033aa:	d907      	bls.n	80033bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e08f      	b.n	80034dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	ea42 0103 	orr.w	r1, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6851      	ldr	r1, [r2, #4]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6892      	ldr	r2, [r2, #8]
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68d2      	ldr	r2, [r2, #12]
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6992      	ldr	r2, [r2, #24]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d161      	bne.n	80034cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a38      	ldr	r2, [pc, #224]	; (80034ec <HAL_I2S_Init+0x274>)
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a37      	ldr	r2, [pc, #220]	; (80034f0 <HAL_I2S_Init+0x278>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_I2S_Init+0x1a4>
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_I2S_Init+0x27c>)
 800341a:	e001      	b.n	8003420 <HAL_I2S_Init+0x1a8>
 800341c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	4932      	ldr	r1, [pc, #200]	; (80034f0 <HAL_I2S_Init+0x278>)
 8003428:	428a      	cmp	r2, r1
 800342a:	d101      	bne.n	8003430 <HAL_I2S_Init+0x1b8>
 800342c:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <HAL_I2S_Init+0x27c>)
 800342e:	e001      	b.n	8003434 <HAL_I2S_Init+0x1bc>
 8003430:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003434:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003438:	f023 030f 	bic.w	r3, r3, #15
 800343c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_I2S_Init+0x278>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_I2S_Init+0x1d4>
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_I2S_Init+0x27c>)
 800344a:	e001      	b.n	8003450 <HAL_I2S_Init+0x1d8>
 800344c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003450:	2202      	movs	r2, #2
 8003452:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <HAL_I2S_Init+0x278>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_I2S_Init+0x1ea>
 800345e:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_I2S_Init+0x27c>)
 8003460:	e001      	b.n	8003466 <HAL_I2S_Init+0x1ee>
 8003462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003472:	d003      	beq.n	800347c <HAL_I2S_Init+0x204>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800347c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e001      	b.n	8003488 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	b299      	uxth	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800349e:	4303      	orrs	r3, r0
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	430b      	orrs	r3, r1
 80034a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80034a6:	4313      	orrs	r3, r2
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <HAL_I2S_Init+0x278>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_I2S_Init+0x24c>
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_I2S_Init+0x27c>)
 80034c2:	e001      	b.n	80034c8 <HAL_I2S_Init+0x250>
 80034c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c8:	897a      	ldrh	r2, [r7, #10]
 80034ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	080037fd 	.word	0x080037fd
 80034e8:	cccccccd 	.word	0xcccccccd
 80034ec:	08003911 	.word	0x08003911
 80034f0:	40003800 	.word	0x40003800
 80034f4:	40003400 	.word	0x40003400

080034f8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_I2S_Transmit_DMA+0x1a>
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e08e      	b.n	8003634 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_I2S_Transmit_DMA+0x2e>
 8003522:	2302      	movs	r3, #2
 8003524:	e086      	b.n	8003634 <HAL_I2S_Transmit_DMA+0x13c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d005      	beq.n	8003546 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e076      	b.n	8003634 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d002      	beq.n	8003572 <HAL_I2S_Transmit_DMA+0x7a>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d10a      	bne.n	8003588 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003586:	e005      	b.n	8003594 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	4a28      	ldr	r2, [pc, #160]	; (800363c <HAL_I2S_Transmit_DMA+0x144>)
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	4a27      	ldr	r2, [pc, #156]	; (8003640 <HAL_I2S_Transmit_DMA+0x148>)
 80035a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_I2S_Transmit_DMA+0x14c>)
 80035aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035b4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035bc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035c4:	f7ff f9fe 	bl	80029c4 <HAL_DMA_Start_IT>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00f      	beq.n	80035ee <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f043 0208 	orr.w	r2, r3, #8
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e022      	b.n	8003634 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800360a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0202 	orr.w	r2, r2, #2
 8003628:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	080036db 	.word	0x080036db
 8003640:	08003699 	.word	0x08003699
 8003644:	080036f7 	.word	0x080036f7

08003648 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10e      	bne.n	80036cc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0202 	bic.w	r2, r2, #2
 80036bc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff ffc5 	bl	800365c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff ffad 	bl	8003648 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0203 	bic.w	r2, r2, #3
 8003712:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	f043 0208 	orr.w	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff ffa5 	bl	8003684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10e      	bne.n	8003796 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003786:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff63 	bl	800365c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	b292      	uxth	r2, r2
 80037b2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10e      	bne.n	80037f4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff3e 	bl	8003670 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b04      	cmp	r3, #4
 8003816:	d13a      	bne.n	800388e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d109      	bne.n	8003836 <I2S_IRQHandler+0x3a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d102      	bne.n	8003836 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ffb4 	bl	800379e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d126      	bne.n	800388e <I2S_IRQHandler+0x92>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b20      	cmp	r3, #32
 800384c:	d11f      	bne.n	800388e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	f043 0202 	orr.w	r2, r3, #2
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fefb 	bl	8003684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b03      	cmp	r3, #3
 8003898:	d136      	bne.n	8003908 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d109      	bne.n	80038b8 <I2S_IRQHandler+0xbc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d102      	bne.n	80038b8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff45 	bl	8003742 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d122      	bne.n	8003908 <I2S_IRQHandler+0x10c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d11b      	bne.n	8003908 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038de:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff febe 	bl	8003684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4aa2      	ldr	r2, [pc, #648]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800392a:	4ba2      	ldr	r3, [pc, #648]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800392c:	e001      	b.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800392e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a9b      	ldr	r2, [pc, #620]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003948:	4b9a      	ldr	r3, [pc, #616]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800394a:	e001      	b.n	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800394c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d004      	beq.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 8099 	bne.w	8003a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f925 	bl	8003bcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d107      	bne.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9c8 	bl	8003d2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d13a      	bne.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d035      	beq.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a7e      	ldr	r2, [pc, #504]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039ba:	4b7e      	ldr	r3, [pc, #504]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039bc:	e001      	b.n	80039c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4979      	ldr	r1, [pc, #484]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ca:	428b      	cmp	r3, r1
 80039cc:	d101      	bne.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ce:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d0:	e001      	b.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fe34 	bl	8003684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	f040 80be 	bne.w	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80b8 	beq.w	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a59      	ldr	r2, [pc, #356]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a4e:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a50:	e001      	b.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4954      	ldr	r1, [pc, #336]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a5e:	428b      	cmp	r3, r1
 8003a60:	d101      	bne.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a62:	4b54      	ldr	r3, [pc, #336]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a64:	e001      	b.n	8003a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a70:	2300      	movs	r3, #0
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fdf6 	bl	8003684 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a98:	e084      	b.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d107      	bne.n	8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8be 	bl	8003c30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8fd 	bl	8003cc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d12f      	bne.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d02a      	beq.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003af0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a2e      	ldr	r2, [pc, #184]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003afe:	e001      	b.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4929      	ldr	r1, [pc, #164]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b10:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b12:	e001      	b.n	8003b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f043 0202 	orr.w	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fda6 	bl	8003684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d131      	bne.n	8003ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4912      	ldr	r1, [pc, #72]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b66:	428b      	cmp	r3, r1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b6c:	e001      	b.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f043 0204 	orr.w	r2, r3, #4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fd71 	bl	8003684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba2:	e000      	b.n	8003ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba4:	bf00      	nop
}
 8003ba6:	bf00      	nop
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40003800 	.word	0x40003800
 8003bb4:	40003400 	.word	0x40003400

08003bb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c99      	adds	r1, r3, #2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6251      	str	r1, [r2, #36]	; 0x24
 8003bde:	881a      	ldrh	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d113      	bne.n	8003c26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff ffc9 	bl	8003bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c99      	adds	r1, r3, #2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6251      	str	r1, [r2, #36]	; 0x24
 8003c42:	8819      	ldrh	r1, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <I2SEx_TxISR_I2SExt+0x22>
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8003c50:	e001      	b.n	8003c56 <I2SEx_TxISR_I2SExt+0x26>
 8003c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c56:	460a      	mov	r2, r1
 8003c58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d121      	bne.n	8003cb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <I2SEx_TxISR_I2SExt+0x50>
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8003c7e:	e001      	b.n	8003c84 <I2SEx_TxISR_I2SExt+0x54>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	490d      	ldr	r1, [pc, #52]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d101      	bne.n	8003c94 <I2SEx_TxISR_I2SExt+0x64>
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8003c92:	e001      	b.n	8003c98 <I2SEx_TxISR_I2SExt+0x68>
 8003c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff81 	bl	8003bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40003800 	.word	0x40003800
 8003cc4:	40003400 	.word	0x40003400

08003cc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68d8      	ldr	r0, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	1c99      	adds	r1, r3, #2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ce0:	b282      	uxth	r2, r0
 8003ce2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d113      	bne.n	8003d24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff4a 	bl	8003bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <I2SEx_RxISR_I2SExt+0x90>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <I2SEx_RxISR_I2SExt+0x16>
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003d40:	e001      	b.n	8003d46 <I2SEx_RxISR_I2SExt+0x1a>
 8003d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d46:	68d8      	ldr	r0, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	1c99      	adds	r1, r3, #2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d52:	b282      	uxth	r2, r0
 8003d54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d121      	bne.n	8003db2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <I2SEx_RxISR_I2SExt+0x90>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <I2SEx_RxISR_I2SExt+0x50>
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003d7a:	e001      	b.n	8003d80 <I2SEx_RxISR_I2SExt+0x54>
 8003d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	490d      	ldr	r1, [pc, #52]	; (8003dbc <I2SEx_RxISR_I2SExt+0x90>)
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d101      	bne.n	8003d90 <I2SEx_RxISR_I2SExt+0x64>
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8003d8e:	e001      	b.n	8003d94 <I2SEx_RxISR_I2SExt+0x68>
 8003d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff03 	bl	8003bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40003800 	.word	0x40003800
 8003dc0:	40003400 	.word	0x40003400

08003dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e25b      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d075      	beq.n	8003ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	4ba3      	ldr	r3, [pc, #652]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4ba0      	ldr	r3, [pc, #640]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b9d      	ldr	r3, [pc, #628]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	4b99      	ldr	r3, [pc, #612]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x108>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d157      	bne.n	8003ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e236      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x74>
 8003e2a:	4b91      	ldr	r3, [pc, #580]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a90      	ldr	r2, [pc, #576]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xb0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x98>
 8003e42:	4b8b      	ldr	r3, [pc, #556]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a8a      	ldr	r2, [pc, #552]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b88      	ldr	r3, [pc, #544]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a87      	ldr	r2, [pc, #540]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xb0>
 8003e5c:	4b84      	ldr	r3, [pc, #528]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a83      	ldr	r2, [pc, #524]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b81      	ldr	r3, [pc, #516]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a80      	ldr	r2, [pc, #512]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fbb4 	bl	80025e8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fbb0 	bl	80025e8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1fb      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b76      	ldr	r3, [pc, #472]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xc0>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fba0 	bl	80025e8 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe fb9c 	bl	80025e8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e1e7      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0xe8>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d063      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	4b65      	ldr	r3, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b62      	ldr	r3, [pc, #392]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d11c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b5f      	ldr	r3, [pc, #380]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d116      	bne.n	8003f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	4b5c      	ldr	r3, [pc, #368]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x152>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e1bb      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f16:	4b56      	ldr	r3, [pc, #344]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4952      	ldr	r1, [pc, #328]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	e03a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f34:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <HAL_RCC_OscConfig+0x2b0>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fe fb55 	bl	80025e8 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fe fb51 	bl	80025e8 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e19c      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f54:	4b46      	ldr	r3, [pc, #280]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4940      	ldr	r1, [pc, #256]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
 8003f74:	e015      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f76:	4b3f      	ldr	r3, [pc, #252]	; (8004074 <HAL_RCC_OscConfig+0x2b0>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fb34 	bl	80025e8 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fe fb30 	bl	80025e8 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e17b      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d030      	beq.n	8004010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <HAL_RCC_OscConfig+0x2b4>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fe fb14 	bl	80025e8 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc4:	f7fe fb10 	bl	80025e8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e15b      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd6:	4b26      	ldr	r3, [pc, #152]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x200>
 8003fe2:	e015      	b.n	8004010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_OscConfig+0x2b4>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fea:	f7fe fafd 	bl	80025e8 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff2:	f7fe faf9 	bl	80025e8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e144      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a0 	beq.w	800415e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a0e      	ldr	r2, [pc, #56]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_OscConfig+0x2b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d121      	bne.n	800409e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <HAL_RCC_OscConfig+0x2b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <HAL_RCC_OscConfig+0x2b8>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fe fabf 	bl	80025e8 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	e011      	b.n	8004092 <HAL_RCC_OscConfig+0x2ce>
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	42470000 	.word	0x42470000
 8004078:	42470e80 	.word	0x42470e80
 800407c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004080:	f7fe fab2 	bl	80025e8 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0fd      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	4b81      	ldr	r3, [pc, #516]	; (8004298 <HAL_RCC_OscConfig+0x4d4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2f0>
 80040a6:	4b7d      	ldr	r3, [pc, #500]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	4a7c      	ldr	r2, [pc, #496]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	6713      	str	r3, [r2, #112]	; 0x70
 80040b2:	e01c      	b.n	80040ee <HAL_RCC_OscConfig+0x32a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d10c      	bne.n	80040d6 <HAL_RCC_OscConfig+0x312>
 80040bc:	4b77      	ldr	r3, [pc, #476]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a76      	ldr	r2, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	4b74      	ldr	r3, [pc, #464]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a73      	ldr	r2, [pc, #460]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
 80040d4:	e00b      	b.n	80040ee <HAL_RCC_OscConfig+0x32a>
 80040d6:	4b71      	ldr	r3, [pc, #452]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a70      	ldr	r2, [pc, #448]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	4b6e      	ldr	r3, [pc, #440]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a6d      	ldr	r2, [pc, #436]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d015      	beq.n	8004122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fe fa77 	bl	80025e8 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fe:	f7fe fa73 	bl	80025e8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	f241 3288 	movw	r2, #5000	; 0x1388
 800410c:	4293      	cmp	r3, r2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e0bc      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0ee      	beq.n	80040fe <HAL_RCC_OscConfig+0x33a>
 8004120:	e014      	b.n	800414c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fe fa61 	bl	80025e8 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004128:	e00a      	b.n	8004140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fe fa5d 	bl	80025e8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	; 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e0a6      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004140:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ee      	bne.n	800412a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d105      	bne.n	800415e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004152:	4b52      	ldr	r3, [pc, #328]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 8004158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8092 	beq.w	800428c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b08      	cmp	r3, #8
 8004172:	d05c      	beq.n	800422e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d141      	bne.n	8004200 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417c:	4b48      	ldr	r3, [pc, #288]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fe fa31 	bl	80025e8 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418a:	f7fe fa2d 	bl	80025e8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e078      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419c:	4b3f      	ldr	r3, [pc, #252]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f0      	bne.n	800418a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	019b      	lsls	r3, r3, #6
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	3b01      	subs	r3, #1
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	061b      	lsls	r3, r3, #24
 80041cc:	4933      	ldr	r1, [pc, #204]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d2:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fe fa06 	bl	80025e8 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe fa02 	bl	80025e8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04d      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b2a      	ldr	r3, [pc, #168]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x41c>
 80041fe:	e045      	b.n	800428c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7fe f9ef 	bl	80025e8 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420e:	f7fe f9eb 	bl	80025e8 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e036      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004220:	4b1e      	ldr	r3, [pc, #120]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x44a>
 800422c:	e02e      	b.n	800428c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e029      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423a:	4b18      	ldr	r3, [pc, #96]	; (800429c <HAL_RCC_OscConfig+0x4d8>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	429a      	cmp	r2, r3
 800424c:	d11c      	bne.n	8004288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d115      	bne.n	8004288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004262:	4013      	ands	r3, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004268:	4293      	cmp	r3, r2
 800426a:	d10d      	bne.n	8004288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d106      	bne.n	8004288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40007000 	.word	0x40007000
 800429c:	40023800 	.word	0x40023800
 80042a0:	42470060 	.word	0x42470060

080042a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0cc      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b8:	4b68      	ldr	r3, [pc, #416]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d90c      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b65      	ldr	r3, [pc, #404]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b63      	ldr	r3, [pc, #396]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0b8      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d020      	beq.n	800432e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f8:	4b59      	ldr	r3, [pc, #356]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a58      	ldr	r2, [pc, #352]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004310:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a52      	ldr	r2, [pc, #328]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800431a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431c:	4b50      	ldr	r3, [pc, #320]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	494d      	ldr	r1, [pc, #308]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d044      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d119      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e07f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d003      	beq.n	8004362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	2b03      	cmp	r3, #3
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e06f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004372:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e067      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004382:	4b37      	ldr	r3, [pc, #220]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4934      	ldr	r1, [pc, #208]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004394:	f7fe f928 	bl	80025e8 <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439c:	f7fe f924 	bl	80025e8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e04f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 020c 	and.w	r2, r3, #12
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d1eb      	bne.n	800439c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d20c      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e032      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4916      	ldr	r1, [pc, #88]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	490e      	ldr	r1, [pc, #56]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800442a:	f000 f821 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800442e:	4601      	mov	r1, r0
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	fa21 f303 	lsr.w	r3, r1, r3
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe f888 	bl	8002560 <HAL_InitTick>

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023c00 	.word	0x40023c00
 8004460:	40023800 	.word	0x40023800
 8004464:	0801aec0 	.word	0x0801aec0
 8004468:	2001aa6c 	.word	0x2001aa6c
 800446c:	2001aa70 	.word	0x2001aa70

08004470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	2300      	movs	r3, #0
 8004480:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004486:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b04      	cmp	r3, #4
 8004490:	d007      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x32>
 8004492:	2b08      	cmp	r3, #8
 8004494:	d008      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x38>
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 808d 	bne.w	80045b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800449e:	60bb      	str	r3, [r7, #8]
       break;
 80044a0:	e08c      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a2:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a4:	60bb      	str	r3, [r7, #8]
      break;
 80044a6:	e089      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044a8:	4b47      	ldr	r3, [pc, #284]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b2:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d023      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	ea03 0501 	and.w	r5, r3, r1
 80044d4:	ea04 0602 	and.w	r6, r4, r2
 80044d8:	4a3d      	ldr	r2, [pc, #244]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044da:	fb02 f106 	mul.w	r1, r2, r6
 80044de:	2200      	movs	r2, #0
 80044e0:	fb02 f205 	mul.w	r2, r2, r5
 80044e4:	440a      	add	r2, r1
 80044e6:	493a      	ldr	r1, [pc, #232]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044e8:	fba5 0101 	umull	r0, r1, r5, r1
 80044ec:	1853      	adds	r3, r2, r1
 80044ee:	4619      	mov	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f04f 0400 	mov.w	r4, #0
 80044f6:	461a      	mov	r2, r3
 80044f8:	4623      	mov	r3, r4
 80044fa:	f7fb fe6d 	bl	80001d8 <__aeabi_uldivmod>
 80044fe:	4603      	mov	r3, r0
 8004500:	460c      	mov	r4, r1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e049      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004506:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	099b      	lsrs	r3, r3, #6
 800450c:	f04f 0400 	mov.w	r4, #0
 8004510:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	ea03 0501 	and.w	r5, r3, r1
 800451c:	ea04 0602 	and.w	r6, r4, r2
 8004520:	4629      	mov	r1, r5
 8004522:	4632      	mov	r2, r6
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	f04f 0400 	mov.w	r4, #0
 800452c:	0154      	lsls	r4, r2, #5
 800452e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004532:	014b      	lsls	r3, r1, #5
 8004534:	4619      	mov	r1, r3
 8004536:	4622      	mov	r2, r4
 8004538:	1b49      	subs	r1, r1, r5
 800453a:	eb62 0206 	sbc.w	r2, r2, r6
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	f04f 0400 	mov.w	r4, #0
 8004546:	0194      	lsls	r4, r2, #6
 8004548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800454c:	018b      	lsls	r3, r1, #6
 800454e:	1a5b      	subs	r3, r3, r1
 8004550:	eb64 0402 	sbc.w	r4, r4, r2
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	00e2      	lsls	r2, r4, #3
 800455e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004562:	00d9      	lsls	r1, r3, #3
 8004564:	460b      	mov	r3, r1
 8004566:	4614      	mov	r4, r2
 8004568:	195b      	adds	r3, r3, r5
 800456a:	eb44 0406 	adc.w	r4, r4, r6
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	02a2      	lsls	r2, r4, #10
 8004578:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800457c:	0299      	lsls	r1, r3, #10
 800457e:	460b      	mov	r3, r1
 8004580:	4614      	mov	r4, r2
 8004582:	4618      	mov	r0, r3
 8004584:	4621      	mov	r1, r4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f04f 0400 	mov.w	r4, #0
 800458c:	461a      	mov	r2, r3
 800458e:	4623      	mov	r3, r4
 8004590:	f7fb fe22 	bl	80001d8 <__aeabi_uldivmod>
 8004594:	4603      	mov	r3, r0
 8004596:	460c      	mov	r4, r1
 8004598:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	3301      	adds	r3, #1
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	60bb      	str	r3, [r7, #8]
      break;
 80045b4:	e002      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80045b8:	60bb      	str	r3, [r7, #8]
      break;
 80045ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045bc:	68bb      	ldr	r3, [r7, #8]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	00f42400 	.word	0x00f42400
 80045d0:	017d7840 	.word	0x017d7840

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d038      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045fc:	4b68      	ldr	r3, [pc, #416]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004602:	f7fd fff1 	bl	80025e8 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004608:	e008      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800460a:	f7fd ffed 	bl	80025e8 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e0bd      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800461c:	4b61      	ldr	r3, [pc, #388]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	019b      	lsls	r3, r3, #6
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	495a      	ldr	r1, [pc, #360]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004642:	4b57      	ldr	r3, [pc, #348]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004648:	f7fd ffce 	bl	80025e8 <HAL_GetTick>
 800464c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004650:	f7fd ffca 	bl	80025e8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e09a      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004662:	4b50      	ldr	r3, [pc, #320]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8083 	beq.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	4b48      	ldr	r3, [pc, #288]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	4a47      	ldr	r2, [pc, #284]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468a:	6413      	str	r3, [r2, #64]	; 0x40
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004698:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a42      	ldr	r2, [pc, #264]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800469e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046a4:	f7fd ffa0 	bl	80025e8 <HAL_GetTick>
 80046a8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ac:	f7fd ff9c 	bl	80025e8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e06c      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ca:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02f      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d028      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e8:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f8:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046fe:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d114      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd ff6a 	bl	80025e8 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fd ff66 	bl	80025e8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e034      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004746:	d10d      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004748:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475c:	4911      	ldr	r1, [pc, #68]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
 8004762:	e005      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800476e:	6093      	str	r3, [r2, #8]
 8004770:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477c:	4909      	ldr	r1, [pc, #36]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	4313      	orrs	r3, r2
 8004780:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	7d1a      	ldrb	r2, [r3, #20]
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004794:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	42470068 	.word	0x42470068
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40007000 	.word	0x40007000
 80047ac:	42470e40 	.word	0x42470e40
 80047b0:	424711e0 	.word	0x424711e0

080047b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d13f      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047d2:	4b23      	ldr	r3, [pc, #140]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047da:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d131      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047e6:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047e8:	617b      	str	r3, [r7, #20]
          break;
 80047ea:	e031      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047ec:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f8:	d109      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047fa:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004804:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e008      	b.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483a:	0f1b      	lsrs	r3, r3, #28
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	617b      	str	r3, [r7, #20]
          break;
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
          break;
 800484e:	bf00      	nop
        }
      }
      break;
 8004850:	bf00      	nop
    }
  }
  return frequency;
 8004852:	697b      	ldr	r3, [r7, #20]
}
 8004854:	4618      	mov	r0, r3
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40023800 	.word	0x40023800
 8004864:	00bb8000 	.word	0x00bb8000
 8004868:	017d7840 	.word	0x017d7840
 800486c:	00f42400 	.word	0x00f42400

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e01d      	b.n	80048be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd fd32 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fa1e 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d007      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d122      	bne.n	800496a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d11b      	bne.n	800496a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0202 	mvn.w	r2, #2
 800493a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9af 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 8004956:	e005      	b.n	8004964 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9a1 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9b2 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d122      	bne.n	80049be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d11b      	bne.n	80049be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f06f 0204 	mvn.w	r2, #4
 800498e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f985 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80049aa:	e005      	b.n	80049b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f977 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f988 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d122      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d11b      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0208 	mvn.w	r2, #8
 80049e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2204      	movs	r2, #4
 80049e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f95b 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80049fe:	e005      	b.n	8004a0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f94d 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f95e 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d122      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d11b      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0210 	mvn.w	r2, #16
 8004a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f931 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 8004a52:	e005      	b.n	8004a60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f923 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f934 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10e      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d107      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f06f 0201 	mvn.w	r2, #1
 8004a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f8fd 	bl	8004c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d10e      	bne.n	8004abe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 faab 	bl	8005014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d10e      	bne.n	8004aea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d107      	bne.n	8004aea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f8f9 	bl	8004cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d10e      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d107      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f06f 0220 	mvn.w	r2, #32
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa75 	bl	8005000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_ConfigClockSource+0x18>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0a6      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x166>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b54:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d067      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x120>
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d80b      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x6c>
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d073      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x140>
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d802      	bhi.n	8004b80 <HAL_TIM_ConfigClockSource+0x62>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d06f      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b7e:	e078      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d06c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x140>
 8004b84:	2b30      	cmp	r3, #48	; 0x30
 8004b86:	d06a      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004b88:	e073      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b8a:	2b70      	cmp	r3, #112	; 0x70
 8004b8c:	d00d      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x8c>
 8004b8e:	2b70      	cmp	r3, #112	; 0x70
 8004b90:	d804      	bhi.n	8004b9c <HAL_TIM_ConfigClockSource+0x7e>
 8004b92:	2b50      	cmp	r3, #80	; 0x50
 8004b94:	d033      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0xe0>
 8004b96:	2b60      	cmp	r3, #96	; 0x60
 8004b98:	d041      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004b9a:	e06a      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	d066      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0x152>
 8004ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba6:	d017      	beq.n	8004bd8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ba8:	e063      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f000 f993 	bl	8004ee4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	609a      	str	r2, [r3, #8]
      break;
 8004bd6:	e04c      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6899      	ldr	r1, [r3, #8]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f000 f97c 	bl	8004ee4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfa:	609a      	str	r2, [r3, #8]
      break;
 8004bfc:	e039      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 f8f0 	bl	8004df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2150      	movs	r1, #80	; 0x50
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f949 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e029      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 f90f 	bl	8004e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2160      	movs	r1, #96	; 0x60
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f939 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e019      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 f8d0 	bl	8004df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2140      	movs	r1, #64	; 0x40
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f929 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e009      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f000 f920 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c6e:	e000      	b.n	8004c72 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a31      	ldr	r2, [pc, #196]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <TIM_Base_SetConfig+0xf4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <TIM_Base_SetConfig+0xf8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <TIM_Base_SetConfig+0xfc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800

08004df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 030a 	bic.w	r3, r3, #10
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0210 	bic.w	r2, r3, #16
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e050      	b.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d013      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10c      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40014000 	.word	0x40014000

08005000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4e0d      	ldr	r6, [pc, #52]	; (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 800502e:	1ba4      	subs	r4, r4, r6
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2500      	movs	r5, #0
 8005034:	42a5      	cmp	r5, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4e0b      	ldr	r6, [pc, #44]	; (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	; (800506c <__libc_init_array+0x44>)
 800503c:	f000 f820 	bl	8005080 <_init>
 8005040:	1ba4      	subs	r4, r4, r6
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2500      	movs	r5, #0
 8005046:	42a5      	cmp	r5, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005050:	4798      	blx	r3
 8005052:	3501      	adds	r5, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800505a:	4798      	blx	r3
 800505c:	3501      	adds	r5, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	0801aee0 	.word	0x0801aee0
 8005064:	0801aee0 	.word	0x0801aee0
 8005068:	0801aee0 	.word	0x0801aee0
 800506c:	0801aee4 	.word	0x0801aee4

08005070 <memset>:
 8005070:	4402      	add	r2, r0
 8005072:	4603      	mov	r3, r0
 8005074:	4293      	cmp	r3, r2
 8005076:	d100      	bne.n	800507a <memset+0xa>
 8005078:	4770      	bx	lr
 800507a:	f803 1b01 	strb.w	r1, [r3], #1
 800507e:	e7f9      	b.n	8005074 <memset+0x4>

08005080 <_init>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr

0800508c <_fini>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr
